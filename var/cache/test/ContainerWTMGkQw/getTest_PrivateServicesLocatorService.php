<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the public 'test.private_services_locator' shared service.

return $this->services['test.private_services_locator'] = new \Symfony\Component\DependencyInjection\ServiceLocator(array('App\\Repository\\ArticleRepository' => function () {
    return ($this->privates['App\Repository\ArticleRepository'] ?? $this->load('getArticleRepositoryService.php'));
}, 'App\\Repository\\UserRepository' => function () {
    return ($this->privates['App\Repository\UserRepository'] ?? $this->load('getUserRepositoryService.php'));
}, 'App\\Security\\TokenAuthenticator' => function () {
    return ($this->privates['App\Security\TokenAuthenticator'] ?? $this->privates['App\Security\TokenAuthenticator'] = new \App\Security\TokenAuthenticator());
}, 'controller_name_converter' => function () {
    return ($this->privates['controller_name_converter'] ?? $this->privates['controller_name_converter'] = new \Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser(($this->services['kernel'] ?? $this->get('kernel', 1))));
}, 'argument_metadata_factory' => function () {
    return ($this->privates['argument_metadata_factory'] ?? $this->privates['argument_metadata_factory'] = new \Symfony\Component\HttpKernel\ControllerMetadata\ArgumentMetadataFactory());
}, 'response_listener' => function () {
    return ($this->privates['response_listener'] ?? $this->privates['response_listener'] = new \Symfony\Component\HttpKernel\EventListener\ResponseListener('UTF-8'));
}, 'streamed_response_listener' => function () {
    return ($this->privates['streamed_response_listener'] ?? $this->privates['streamed_response_listener'] = new \Symfony\Component\HttpKernel\EventListener\StreamedResponseListener());
}, 'locale_listener' => function () {
    return ($this->privates['locale_listener'] ?? $this->getLocaleListenerService());
}, 'validate_request_listener' => function () {
    return ($this->privates['validate_request_listener'] ?? $this->privates['validate_request_listener'] = new \Symfony\Component\HttpKernel\EventListener\ValidateRequestListener());
}, 'resolve_controller_name_subscriber' => function () {
    return ($this->privates['resolve_controller_name_subscriber'] ?? $this->getResolveControllerNameSubscriberService());
}, 'parameter_bag' => function () {
    return ($this->privates['parameter_bag'] ?? $this->privates['parameter_bag'] = new \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag($this));
}, 'file_locator' => function () {
    return ($this->privates['file_locator'] ?? $this->privates['file_locator'] = new \Symfony\Component\HttpKernel\Config\FileLocator(($this->services['kernel'] ?? $this->get('kernel', 1)), '/app/src/Resources', array(0 => '/app/src')));
}, 'config_cache_factory' => function () {
    return ($this->privates['config_cache_factory'] ?? $this->getConfigCacheFactoryService());
}, 'dependency_injection.config.container_parameters_resource_checker' => function () {
    return ($this->privates['dependency_injection.config.container_parameters_resource_checker'] ?? $this->privates['dependency_injection.config.container_parameters_resource_checker'] = new \Symfony\Component\DependencyInjection\Config\ContainerParametersResourceChecker($this));
}, 'config.resource.self_checking_resource_checker' => function () {
    return ($this->privates['config.resource.self_checking_resource_checker'] ?? $this->privates['config.resource.self_checking_resource_checker'] = new \Symfony\Component\Config\Resource\SelfCheckingResourceChecker());
}, 'fragment.handler' => function () {
    return ($this->privates['fragment.handler'] ?? $this->load('getFragment_HandlerService.php'));
}, 'fragment.renderer.inline' => function () {
    return ($this->privates['fragment.renderer.inline'] ?? $this->load('getFragment_Renderer_InlineService.php'));
}, 'console.error_listener' => function () {
    return ($this->privates['console.error_listener'] ?? $this->load('getConsole_ErrorListenerService.php'));
}, 'console.command.about' => function () {
    return ($this->privates['console.command.about'] ?? $this->load('getConsole_Command_AboutService.php'));
}, 'console.command.assets_install' => function () {
    return ($this->privates['console.command.assets_install'] ?? $this->load('getConsole_Command_AssetsInstallService.php'));
}, 'console.command.cache_clear' => function () {
    return ($this->privates['console.command.cache_clear'] ?? $this->load('getConsole_Command_CacheClearService.php'));
}, 'console.command.cache_pool_clear' => function () {
    return ($this->privates['console.command.cache_pool_clear'] ?? $this->load('getConsole_Command_CachePoolClearService.php'));
}, 'console.command.cache_pool_prune' => function () {
    return ($this->privates['console.command.cache_pool_prune'] ?? $this->load('getConsole_Command_CachePoolPruneService.php'));
}, 'console.command.cache_pool_delete' => function () {
    return ($this->privates['console.command.cache_pool_delete'] ?? $this->load('getConsole_Command_CachePoolDeleteService.php'));
}, 'console.command.cache_warmup' => function () {
    return ($this->privates['console.command.cache_warmup'] ?? $this->load('getConsole_Command_CacheWarmupService.php'));
}, 'console.command.config_debug' => function () {
    return ($this->privates['console.command.config_debug'] ?? $this->load('getConsole_Command_ConfigDebugService.php'));
}, 'console.command.config_dump_reference' => function () {
    return ($this->privates['console.command.config_dump_reference'] ?? $this->load('getConsole_Command_ConfigDumpReferenceService.php'));
}, 'console.command.container_debug' => function () {
    return ($this->privates['console.command.container_debug'] ?? $this->load('getConsole_Command_ContainerDebugService.php'));
}, 'console.command.debug_autowiring' => function () {
    return ($this->privates['console.command.debug_autowiring'] ?? $this->load('getConsole_Command_DebugAutowiringService.php'));
}, 'console.command.event_dispatcher_debug' => function () {
    return ($this->privates['console.command.event_dispatcher_debug'] ?? $this->load('getConsole_Command_EventDispatcherDebugService.php'));
}, 'console.command.router_debug' => function () {
    return ($this->privates['console.command.router_debug'] ?? $this->load('getConsole_Command_RouterDebugService.php'));
}, 'console.command.router_match' => function () {
    return ($this->privates['console.command.router_match'] ?? $this->load('getConsole_Command_RouterMatchService.php'));
}, 'console.command.translation_debug' => function () {
    return ($this->privates['console.command.translation_debug'] ?? $this->load('getConsole_Command_TranslationDebugService.php'));
}, 'console.command.translation_update' => function () {
    return ($this->privates['console.command.translation_update'] ?? $this->load('getConsole_Command_TranslationUpdateService.php'));
}, 'console.command.xliff_lint' => function () {
    return ($this->privates['console.command.xliff_lint'] ?? $this->load('getConsole_Command_XliffLintService.php'));
}, 'console.command.yaml_lint' => function () {
    return ($this->privates['console.command.yaml_lint'] ?? $this->load('getConsole_Command_YamlLintService.php'));
}, 'cache.validator' => function () {
    return ($this->privates['cache.validator'] ?? $this->getCache_ValidatorService());
}, 'cache.serializer' => function () {
    return ($this->privates['cache.serializer'] ?? $this->getCache_SerializerService());
}, 'cache.annotations' => function () {
    return ($this->privates['cache.annotations'] ?? $this->getCache_AnnotationsService());
}, 'cache.default_clearer' => function () {
    return ($this->services['cache.app_clearer'] ?? $this->load('getCache_AppClearerService.php'));
}, 'translator.selector' => function () {
    return ($this->privates['translator.selector'] ?? $this->privates['translator.selector'] = new \Symfony\Component\Translation\MessageSelector());
}, 'test.client.history' => function () {
    return new \Symfony\Component\BrowserKit\History();
}, 'test.client.cookiejar' => function () {
    return new \Symfony\Component\BrowserKit\CookieJar();
}, 'test.session.listener' => function () {
    return ($this->privates['test.session.listener'] ?? $this->getTest_Session_ListenerService());
}, 'session.storage.metadata_bag' => function () {
    return ($this->privates['session.storage.metadata_bag'] ?? $this->privates['session.storage.metadata_bag'] = new \Symfony\Component\HttpFoundation\Session\Storage\MetadataBag('_sf2_meta', '0'));
}, 'session.flash_bag' => function () {
    return ($this->privates['session.flash_bag'] ?? $this->privates['session.flash_bag'] = new \Symfony\Component\HttpFoundation\Session\Flash\FlashBag());
}, 'session.attribute_bag' => function () {
    return ($this->privates['session.attribute_bag'] ?? $this->privates['session.attribute_bag'] = new \Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag());
}, 'session.storage.mock_file' => function () {
    return ($this->privates['session.storage.mock_file'] ?? $this->load('getSession_Storage_MockFileService.php'));
}, 'session_listener' => function () {
    return ($this->privates['session_listener'] ?? $this->getSessionListenerService());
}, 'security.csrf.token_generator' => function () {
    return ($this->privates['security.csrf.token_generator'] ?? $this->privates['security.csrf.token_generator'] = new \Symfony\Component\Security\Csrf\TokenGenerator\UriSafeTokenGenerator());
}, 'security.csrf.token_storage' => function () {
    return ($this->privates['security.csrf.token_storage'] ?? $this->load('getSecurity_Csrf_TokenStorageService.php'));
}, 'twig.runtime.security_csrf' => function () {
    return ($this->privates['twig.runtime.security_csrf'] ?? $this->load('getTwig_Runtime_SecurityCsrfService.php'));
}, 'twig.extension.security_csrf' => function () {
    return ($this->privates['twig.extension.security_csrf'] ?? $this->privates['twig.extension.security_csrf'] = new \Symfony\Bridge\Twig\Extension\CsrfExtension());
}, 'assets.packages' => function () {
    return ($this->privates['assets.packages'] ?? $this->getAssets_PackagesService());
}, 'assets.context' => function () {
    return ($this->privates['assets.context'] ?? $this->getAssets_ContextService());
}, 'assets.empty_version_strategy' => function () {
    return ($this->privates['assets.empty_version_strategy'] ?? $this->privates['assets.empty_version_strategy'] = new \Symfony\Component\Asset\VersionStrategy\EmptyVersionStrategy());
}, 'assets._default_package' => function () {
    return ($this->privates['assets._default_package'] ?? $this->getAssets_DefaultPackageService());
}, 'validator.builder' => function () {
    return ($this->privates['validator.builder'] ?? $this->getValidator_BuilderService());
}, 'validator.mapping.cache_warmer' => function () {
    return ($this->privates['validator.mapping.cache_warmer'] ?? $this->load('getValidator_Mapping_CacheWarmerService.php'));
}, 'validator.validator_factory' => function () {
    return ($this->privates['validator.validator_factory'] ?? $this->getValidator_ValidatorFactoryService());
}, 'validator.expression' => function () {
    return ($this->privates['validator.expression'] ?? $this->privates['validator.expression'] = new \Symfony\Component\Validator\Constraints\ExpressionValidator());
}, 'validator.email' => function () {
    return ($this->privates['validator.email'] ?? $this->privates['validator.email'] = new \Symfony\Component\Validator\Constraints\EmailValidator('html5'));
}, 'translator.default' => function () {
    return ($this->privates['translator.default'] ?? $this->getTranslator_DefaultService());
}, 'translator.formatter.default' => function () {
    return ($this->privates['translator.formatter.default'] ?? $this->getTranslator_Formatter_DefaultService());
}, 'translation.loader.php' => function () {
    return ($this->privates['translation.loader.php'] ?? $this->privates['translation.loader.php'] = new \Symfony\Component\Translation\Loader\PhpFileLoader());
}, 'translation.loader.yml' => function () {
    return ($this->privates['translation.loader.yml'] ?? $this->privates['translation.loader.yml'] = new \Symfony\Component\Translation\Loader\YamlFileLoader());
}, 'translation.loader.xliff' => function () {
    return ($this->privates['translation.loader.xliff'] ?? $this->privates['translation.loader.xliff'] = new \Symfony\Component\Translation\Loader\XliffFileLoader());
}, 'translation.loader.po' => function () {
    return ($this->privates['translation.loader.po'] ?? $this->privates['translation.loader.po'] = new \Symfony\Component\Translation\Loader\PoFileLoader());
}, 'translation.loader.mo' => function () {
    return ($this->privates['translation.loader.mo'] ?? $this->privates['translation.loader.mo'] = new \Symfony\Component\Translation\Loader\MoFileLoader());
}, 'translation.loader.qt' => function () {
    return ($this->privates['translation.loader.qt'] ?? $this->privates['translation.loader.qt'] = new \Symfony\Component\Translation\Loader\QtFileLoader());
}, 'translation.loader.csv' => function () {
    return ($this->privates['translation.loader.csv'] ?? $this->privates['translation.loader.csv'] = new \Symfony\Component\Translation\Loader\CsvFileLoader());
}, 'translation.loader.res' => function () {
    return ($this->privates['translation.loader.res'] ?? $this->privates['translation.loader.res'] = new \Symfony\Component\Translation\Loader\IcuResFileLoader());
}, 'translation.loader.dat' => function () {
    return ($this->privates['translation.loader.dat'] ?? $this->privates['translation.loader.dat'] = new \Symfony\Component\Translation\Loader\IcuDatFileLoader());
}, 'translation.loader.ini' => function () {
    return ($this->privates['translation.loader.ini'] ?? $this->privates['translation.loader.ini'] = new \Symfony\Component\Translation\Loader\IniFileLoader());
}, 'translation.loader.json' => function () {
    return ($this->privates['translation.loader.json'] ?? $this->privates['translation.loader.json'] = new \Symfony\Component\Translation\Loader\JsonFileLoader());
}, 'translation.dumper.php' => function () {
    return ($this->privates['translation.dumper.php'] ?? $this->privates['translation.dumper.php'] = new \Symfony\Component\Translation\Dumper\PhpFileDumper());
}, 'translation.dumper.xliff' => function () {
    return ($this->privates['translation.dumper.xliff'] ?? $this->privates['translation.dumper.xliff'] = new \Symfony\Component\Translation\Dumper\XliffFileDumper());
}, 'translation.dumper.po' => function () {
    return ($this->privates['translation.dumper.po'] ?? $this->privates['translation.dumper.po'] = new \Symfony\Component\Translation\Dumper\PoFileDumper());
}, 'translation.dumper.mo' => function () {
    return ($this->privates['translation.dumper.mo'] ?? $this->privates['translation.dumper.mo'] = new \Symfony\Component\Translation\Dumper\MoFileDumper());
}, 'translation.dumper.yml' => function () {
    return ($this->privates['translation.dumper.yml'] ?? $this->privates['translation.dumper.yml'] = new \Symfony\Component\Translation\Dumper\YamlFileDumper());
}, 'translation.dumper.yaml' => function () {
    return ($this->privates['translation.dumper.yaml'] ?? $this->privates['translation.dumper.yaml'] = new \Symfony\Component\Translation\Dumper\YamlFileDumper('yaml'));
}, 'translation.dumper.qt' => function () {
    return ($this->privates['translation.dumper.qt'] ?? $this->privates['translation.dumper.qt'] = new \Symfony\Component\Translation\Dumper\QtFileDumper());
}, 'translation.dumper.csv' => function () {
    return ($this->privates['translation.dumper.csv'] ?? $this->privates['translation.dumper.csv'] = new \Symfony\Component\Translation\Dumper\CsvFileDumper());
}, 'translation.dumper.ini' => function () {
    return ($this->privates['translation.dumper.ini'] ?? $this->privates['translation.dumper.ini'] = new \Symfony\Component\Translation\Dumper\IniFileDumper());
}, 'translation.dumper.json' => function () {
    return ($this->privates['translation.dumper.json'] ?? $this->privates['translation.dumper.json'] = new \Symfony\Component\Translation\Dumper\JsonFileDumper());
}, 'translation.dumper.res' => function () {
    return ($this->privates['translation.dumper.res'] ?? $this->privates['translation.dumper.res'] = new \Symfony\Component\Translation\Dumper\IcuResFileDumper());
}, 'translation.extractor.php' => function () {
    return ($this->privates['translation.extractor.php'] ?? $this->privates['translation.extractor.php'] = new \Symfony\Component\Translation\Extractor\PhpExtractor());
}, 'translation.reader' => function () {
    return ($this->privates['translation.reader'] ?? $this->load('getTranslation_ReaderService.php'));
}, 'translation.extractor' => function () {
    return ($this->privates['translation.extractor'] ?? $this->load('getTranslation_ExtractorService.php'));
}, 'translation.writer' => function () {
    return ($this->privates['translation.writer'] ?? $this->load('getTranslation_WriterService.php'));
}, 'translation.warmer' => function () {
    return ($this->privates['translation.warmer'] ?? $this->load('getTranslation_WarmerService.php'));
}, 'translator_listener' => function () {
    return ($this->privates['translator_listener'] ?? $this->getTranslatorListenerService());
}, 'profiler.storage' => function () {
    return ($this->privates['profiler.storage'] ?? $this->privates['profiler.storage'] = new \Symfony\Component\HttpKernel\Profiler\FileProfilerStorage(('file:'.$this->targetDirs[0].'/profiler')));
}, 'profiler_listener' => function () {
    return ($this->privates['profiler_listener'] ?? $this->getProfilerListenerService());
}, 'data_collector.config' => function () {
    return ($this->privates['data_collector.config'] ?? $this->getDataCollector_ConfigService());
}, 'data_collector.request' => function () {
    return ($this->privates['data_collector.request'] ?? $this->privates['data_collector.request'] = new \Symfony\Component\HttpKernel\DataCollector\RequestDataCollector());
}, 'data_collector.ajax' => function () {
    return ($this->privates['data_collector.ajax'] ?? $this->privates['data_collector.ajax'] = new \Symfony\Component\HttpKernel\DataCollector\AjaxDataCollector());
}, 'data_collector.exception' => function () {
    return ($this->privates['data_collector.exception'] ?? $this->privates['data_collector.exception'] = new \Symfony\Component\HttpKernel\DataCollector\ExceptionDataCollector());
}, 'data_collector.events' => function () {
    return ($this->privates['data_collector.events'] ?? $this->getDataCollector_EventsService());
}, 'data_collector.logger' => function () {
    return ($this->privates['data_collector.logger'] ?? $this->getDataCollector_LoggerService());
}, 'data_collector.time' => function () {
    return ($this->privates['data_collector.time'] ?? $this->getDataCollector_TimeService());
}, 'data_collector.memory' => function () {
    return ($this->privates['data_collector.memory'] ?? $this->privates['data_collector.memory'] = new \Symfony\Component\HttpKernel\DataCollector\MemoryDataCollector());
}, 'data_collector.router' => function () {
    return ($this->privates['data_collector.router'] ?? $this->privates['data_collector.router'] = new \Symfony\Bundle\FrameworkBundle\DataCollector\RouterDataCollector());
}, 'data_collector.cache' => function () {
    return ($this->privates['data_collector.cache'] ?? $this->getDataCollector_CacheService());
}, 'debug.validator' => function () {
    return ($this->services['validator'] ?? $this->getValidatorService());
}, 'data_collector.validator' => function () {
    return ($this->privates['data_collector.validator'] ?? $this->getDataCollector_ValidatorService());
}, 'translator.data_collector' => function () {
    return ($this->services['translator'] ?? $this->getTranslatorService());
}, 'data_collector.translation' => function () {
    return ($this->privates['data_collector.translation'] ?? $this->getDataCollector_TranslationService());
}, 'cache.property_access' => function () {
    return ($this->privates['cache.property_access'] ?? $this->privates['cache.property_access'] = new \Symfony\Component\Cache\Adapter\ArrayAdapter(0, false));
}, 'debug.debug_handlers_listener' => function () {
    return ($this->privates['debug.debug_handlers_listener'] ?? $this->getDebug_DebugHandlersListenerService());
}, 'debug.file_link_formatter' => function () {
    return ($this->privates['debug.file_link_formatter'] ?? $this->getDebug_FileLinkFormatterService());
}, 'debug.stopwatch' => function () {
    return ($this->privates['debug.stopwatch'] ?? $this->privates['debug.stopwatch'] = new \Symfony\Component\Stopwatch\Stopwatch(true));
}, 'debug.event_dispatcher' => function () {
    return ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());
}, 'debug.controller_resolver' => function () {
    return ($this->privates['debug.controller_resolver'] ?? $this->getDebug_ControllerResolverService());
}, 'debug.argument_resolver' => function () {
    return ($this->privates['debug.argument_resolver'] ?? $this->getDebug_ArgumentResolverService());
}, 'debug.log_processor' => function () {
    return ($this->privates['debug.log_processor'] ?? $this->getDebug_LogProcessorService());
}, 'routing.resolver' => function () {
    return ($this->privates['routing.resolver'] ?? $this->load('getRouting_ResolverService.php'));
}, 'routing.loader.xml' => function () {
    return ($this->privates['routing.loader.xml'] ?? $this->load('getRouting_Loader_XmlService.php'));
}, 'routing.loader.yml' => function () {
    return ($this->privates['routing.loader.yml'] ?? $this->load('getRouting_Loader_YmlService.php'));
}, 'routing.loader.php' => function () {
    return ($this->privates['routing.loader.php'] ?? $this->load('getRouting_Loader_PhpService.php'));
}, 'routing.loader.glob' => function () {
    return ($this->privates['routing.loader.glob'] ?? $this->load('getRouting_Loader_GlobService.php'));
}, 'routing.loader.directory' => function () {
    return ($this->privates['routing.loader.directory'] ?? $this->load('getRouting_Loader_DirectoryService.php'));
}, 'routing.loader.service' => function () {
    return ($this->privates['routing.loader.service'] ?? $this->privates['routing.loader.service'] = new \Symfony\Component\Routing\Loader\DependencyInjection\ServiceRouterLoader($this));
}, 'router.default' => function () {
    return ($this->services['router'] ?? $this->getRouterService());
}, 'router.request_context' => function () {
    return ($this->privates['router.request_context'] ?? $this->getRouter_RequestContextService());
}, 'router.cache_warmer' => function () {
    return ($this->privates['router.cache_warmer'] ?? $this->load('getRouter_CacheWarmerService.php'));
}, 'router_listener' => function () {
    return ($this->privates['router_listener'] ?? $this->getRouterListenerService());
}, 'routing.loader.annotation' => function () {
    return ($this->privates['routing.loader.annotation'] ?? $this->load('getRouting_Loader_AnnotationService.php'));
}, 'routing.loader.annotation.directory' => function () {
    return ($this->privates['routing.loader.annotation.directory'] ?? $this->load('getRouting_Loader_Annotation_DirectoryService.php'));
}, 'routing.loader.annotation.file' => function () {
    return ($this->privates['routing.loader.annotation.file'] ?? $this->load('getRouting_Loader_Annotation_FileService.php'));
}, 'annotations.reader' => function () {
    return ($this->privates['annotations.reader'] ?? $this->getAnnotations_ReaderService());
}, 'annotations.dummy_registry' => function () {
    return ($this->privates['annotations.dummy_registry'] ?? $this->getAnnotations_DummyRegistryService());
}, 'annotations.cached_reader' => function () {
    return ($this->privates['annotations.cached_reader'] ?? $this->getAnnotations_CachedReaderService());
}, 'annotations.cache_warmer' => function () {
    return ($this->privates['annotations.cache_warmer'] ?? $this->load('getAnnotations_CacheWarmerService.php'));
}, 'annotations.cache' => function () {
    return ($this->privates['annotations.cache'] ?? $this->load('getAnnotations_CacheService.php'));
}, 'property_accessor' => function () {
    return ($this->privates['property_accessor'] ?? $this->getPropertyAccessorService());
}, 'serializer.mapping.class_discriminator_resolver' => function () {
    return ($this->privates['serializer.mapping.class_discriminator_resolver'] ?? $this->getSerializer_Mapping_ClassDiscriminatorResolverService());
}, 'serializer.normalizer.constraint_violation_list' => function () {
    return ($this->privates['serializer.normalizer.constraint_violation_list'] ?? $this->privates['serializer.normalizer.constraint_violation_list'] = new \Symfony\Component\Serializer\Normalizer\ConstraintViolationListNormalizer());
}, 'serializer.normalizer.dateinterval' => function () {
    return ($this->privates['serializer.normalizer.dateinterval'] ?? $this->privates['serializer.normalizer.dateinterval'] = new \Symfony\Component\Serializer\Normalizer\DateIntervalNormalizer());
}, 'serializer.normalizer.data_uri' => function () {
    return ($this->privates['serializer.normalizer.data_uri'] ?? $this->privates['serializer.normalizer.data_uri'] = new \Symfony\Component\Serializer\Normalizer\DataUriNormalizer());
}, 'serializer.normalizer.datetime' => function () {
    return ($this->privates['serializer.normalizer.datetime'] ?? $this->privates['serializer.normalizer.datetime'] = new \Symfony\Component\Serializer\Normalizer\DateTimeNormalizer());
}, 'serializer.normalizer.json_serializable' => function () {
    return ($this->privates['serializer.normalizer.json_serializable'] ?? $this->privates['serializer.normalizer.json_serializable'] = new \Symfony\Component\Serializer\Normalizer\JsonSerializableNormalizer());
}, 'serializer.normalizer.object' => function () {
    return ($this->privates['serializer.normalizer.object'] ?? $this->getSerializer_Normalizer_ObjectService());
}, 'serializer.denormalizer.array' => function () {
    return ($this->privates['serializer.denormalizer.array'] ?? $this->privates['serializer.denormalizer.array'] = new \Symfony\Component\Serializer\Normalizer\ArrayDenormalizer());
}, 'serializer.mapping.chain_loader' => function () {
    return ($this->privates['serializer.mapping.chain_loader'] ?? $this->getSerializer_Mapping_ChainLoaderService());
}, 'serializer.mapping.class_metadata_factory' => function () {
    return ($this->privates['serializer.mapping.class_metadata_factory'] ?? $this->getSerializer_Mapping_ClassMetadataFactoryService());
}, 'serializer.mapping.cache_warmer' => function () {
    return ($this->privates['serializer.mapping.cache_warmer'] ?? $this->load('getSerializer_Mapping_CacheWarmerService.php'));
}, 'serializer.encoder.xml' => function () {
    return ($this->privates['serializer.encoder.xml'] ?? $this->privates['serializer.encoder.xml'] = new \Symfony\Component\Serializer\Encoder\XmlEncoder());
}, 'serializer.encoder.json' => function () {
    return ($this->privates['serializer.encoder.json'] ?? $this->privates['serializer.encoder.json'] = new \Symfony\Component\Serializer\Encoder\JsonEncoder());
}, 'serializer.encoder.yaml' => function () {
    return ($this->privates['serializer.encoder.yaml'] ?? $this->privates['serializer.encoder.yaml'] = new \Symfony\Component\Serializer\Encoder\YamlEncoder());
}, 'serializer.encoder.csv' => function () {
    return ($this->privates['serializer.encoder.csv'] ?? $this->privates['serializer.encoder.csv'] = new \Symfony\Component\Serializer\Encoder\CsvEncoder());
}, 'property_info.serializer_extractor' => function () {
    return ($this->privates['property_info.serializer_extractor'] ?? $this->load('getPropertyInfo_SerializerExtractorService.php'));
}, 'property_info' => function () {
    return ($this->privates['property_info'] ?? $this->getPropertyInfoService());
}, 'property_info.reflection_extractor' => function () {
    return ($this->privates['property_info.reflection_extractor'] ?? $this->privates['property_info.reflection_extractor'] = new \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor());
}, 'property_info.php_doc_extractor' => function () {
    return ($this->privates['property_info.php_doc_extractor'] ?? $this->privates['property_info.php_doc_extractor'] = new \Symfony\Component\PropertyInfo\Extractor\PhpDocExtractor());
}, 'doctrine_cache.contains_command' => function () {
    return ($this->services['console.command.public_alias.doctrine_cache.contains_command'] ?? $this->services['console.command.public_alias.doctrine_cache.contains_command'] = new \Doctrine\Bundle\DoctrineCacheBundle\Command\ContainsCommand());
}, 'doctrine_cache.delete_command' => function () {
    return ($this->services['console.command.public_alias.doctrine_cache.delete_command'] ?? $this->services['console.command.public_alias.doctrine_cache.delete_command'] = new \Doctrine\Bundle\DoctrineCacheBundle\Command\DeleteCommand());
}, 'doctrine_cache.flush_command' => function () {
    return ($this->services['console.command.public_alias.doctrine_cache.flush_command'] ?? $this->services['console.command.public_alias.doctrine_cache.flush_command'] = new \Doctrine\Bundle\DoctrineCacheBundle\Command\FlushCommand());
}, 'doctrine_cache.stats_command' => function () {
    return ($this->services['console.command.public_alias.doctrine_cache.stats_command'] ?? $this->services['console.command.public_alias.doctrine_cache.stats_command'] = new \Doctrine\Bundle\DoctrineCacheBundle\Command\StatsCommand());
}, 'doctrine.dbal.logger' => function () {
    return ($this->privates['doctrine.dbal.logger'] ?? $this->load('getDoctrine_Dbal_LoggerService.php'));
}, 'data_collector.doctrine' => function () {
    return ($this->privates['data_collector.doctrine'] ?? $this->getDataCollector_DoctrineService());
}, 'doctrine.dbal.connection_factory' => function () {
    return ($this->privates['doctrine.dbal.connection_factory'] ?? $this->privates['doctrine.dbal.connection_factory'] = new \Doctrine\Bundle\DoctrineBundle\ConnectionFactory(array()));
}, 'doctrine.twig.doctrine_extension' => function () {
    return ($this->privates['doctrine.twig.doctrine_extension'] ?? $this->privates['doctrine.twig.doctrine_extension'] = new \Doctrine\Bundle\DoctrineBundle\Twig\DoctrineExtension());
}, 'doctrine.database_create_command' => function () {
    return ($this->privates['doctrine.database_create_command'] ?? $this->load('getDoctrine_DatabaseCreateCommandService.php'));
}, 'doctrine.database_drop_command' => function () {
    return ($this->privates['doctrine.database_drop_command'] ?? $this->load('getDoctrine_DatabaseDropCommandService.php'));
}, 'doctrine.generate_entities_command' => function () {
    return ($this->privates['doctrine.generate_entities_command'] ?? $this->load('getDoctrine_GenerateEntitiesCommandService.php'));
}, 'doctrine.mapping_import_command' => function () {
    return ($this->privates['doctrine.mapping_import_command'] ?? $this->load('getDoctrine_MappingImportCommandService.php'));
}, 'doctrine.dbal.default_connection.configuration' => function () {
    return ($this->privates['doctrine.dbal.default_connection.configuration'] ?? $this->load('getDoctrine_Dbal_DefaultConnection_ConfigurationService.php'));
}, 'doctrine.dbal.logger.profiling.default' => function () {
    return ($this->privates['doctrine.dbal.logger.profiling.default'] ?? $this->privates['doctrine.dbal.logger.profiling.default'] = new \Doctrine\DBAL\Logging\DebugStack());
}, 'doctrine.dbal.logger.chain.default' => function () {
    return ($this->privates['doctrine.dbal.logger.chain.default'] ?? $this->load('getDoctrine_Dbal_Logger_Chain_DefaultService.php'));
}, 'doctrine.dbal.default_connection.event_manager' => function () {
    return ($this->privates['doctrine.dbal.default_connection.event_manager'] ?? $this->load('getDoctrine_Dbal_DefaultConnection_EventManagerService.php'));
}, 'doctrine.orm.proxy_cache_warmer' => function () {
    return ($this->privates['doctrine.orm.proxy_cache_warmer'] ?? $this->load('getDoctrine_Orm_ProxyCacheWarmerService.php'));
}, 'doctrine.orm.container_repository_factory' => function () {
    return ($this->privates['doctrine.orm.container_repository_factory'] ?? $this->load('getDoctrine_Orm_ContainerRepositoryFactoryService.php'));
}, 'doctrine.orm.validator.unique' => function () {
    return ($this->privates['doctrine.orm.validator.unique'] ?? $this->load('getDoctrine_Orm_Validator_UniqueService.php'));
}, 'doctrine.orm.validator_initializer' => function () {
    return ($this->privates['doctrine.orm.validator_initializer'] ?? $this->getDoctrine_Orm_ValidatorInitializerService());
}, 'doctrine.orm.naming_strategy.underscore' => function () {
    return ($this->privates['doctrine.orm.naming_strategy.underscore'] ?? $this->privates['doctrine.orm.naming_strategy.underscore'] = new \Doctrine\ORM\Mapping\UnderscoreNamingStrategy());
}, 'doctrine.orm.quote_strategy.default' => function () {
    return ($this->privates['doctrine.orm.quote_strategy.default'] ?? $this->privates['doctrine.orm.quote_strategy.default'] = new \Doctrine\ORM\Mapping\DefaultQuoteStrategy());
}, 'doctrine.cache_clear_metadata_command' => function () {
    return ($this->privates['doctrine.cache_clear_metadata_command'] ?? $this->load('getDoctrine_CacheClearMetadataCommandService.php'));
}, 'doctrine.cache_clear_query_cache_command' => function () {
    return ($this->privates['doctrine.cache_clear_query_cache_command'] ?? $this->load('getDoctrine_CacheClearQueryCacheCommandService.php'));
}, 'doctrine.cache_clear_result_command' => function () {
    return ($this->privates['doctrine.cache_clear_result_command'] ?? $this->load('getDoctrine_CacheClearResultCommandService.php'));
}, 'doctrine.cache_collection_region_command' => function () {
    return ($this->privates['doctrine.cache_collection_region_command'] ?? $this->load('getDoctrine_CacheCollectionRegionCommandService.php'));
}, 'doctrine.mapping_convert_command' => function () {
    return ($this->privates['doctrine.mapping_convert_command'] ?? $this->load('getDoctrine_MappingConvertCommandService.php'));
}, 'doctrine.schema_create_command' => function () {
    return ($this->privates['doctrine.schema_create_command'] ?? $this->load('getDoctrine_SchemaCreateCommandService.php'));
}, 'doctrine.schema_drop_command' => function () {
    return ($this->privates['doctrine.schema_drop_command'] ?? $this->load('getDoctrine_SchemaDropCommandService.php'));
}, 'doctrine.ensure_production_settings_command' => function () {
    return ($this->privates['doctrine.ensure_production_settings_command'] ?? $this->load('getDoctrine_EnsureProductionSettingsCommandService.php'));
}, 'doctrine.clear_entity_region_command' => function () {
    return ($this->privates['doctrine.clear_entity_region_command'] ?? $this->load('getDoctrine_ClearEntityRegionCommandService.php'));
}, 'doctrine.database_import_command' => function () {
    return ($this->privates['doctrine.database_import_command'] ?? $this->load('getDoctrine_DatabaseImportCommandService.php'));
}, 'doctrine.mapping_info_command' => function () {
    return ($this->privates['doctrine.mapping_info_command'] ?? $this->load('getDoctrine_MappingInfoCommandService.php'));
}, 'doctrine.clear_query_region_command' => function () {
    return ($this->privates['doctrine.clear_query_region_command'] ?? $this->load('getDoctrine_ClearQueryRegionCommandService.php'));
}, 'doctrine.query_dql_command' => function () {
    return ($this->privates['doctrine.query_dql_command'] ?? $this->load('getDoctrine_QueryDqlCommandService.php'));
}, 'doctrine.query_sql_command' => function () {
    return ($this->privates['doctrine.query_sql_command'] ?? $this->load('getDoctrine_QuerySqlCommandService.php'));
}, 'doctrine.schema_update_command' => function () {
    return ($this->privates['doctrine.schema_update_command'] ?? $this->load('getDoctrine_SchemaUpdateCommandService.php'));
}, 'doctrine.schema_validate_command' => function () {
    return ($this->privates['doctrine.schema_validate_command'] ?? $this->load('getDoctrine_SchemaValidateCommandService.php'));
}, 'doctrine.orm.default_configuration' => function () {
    return ($this->privates['doctrine.orm.default_configuration'] ?? $this->load('getDoctrine_Orm_DefaultConfigurationService.php'));
}, 'doctrine.orm.default_annotation_metadata_driver' => function () {
    return ($this->privates['doctrine.orm.default_annotation_metadata_driver'] ?? $this->load('getDoctrine_Orm_DefaultAnnotationMetadataDriverService.php'));
}, 'doctrine.orm.default_metadata_driver' => function () {
    return ($this->privates['doctrine.orm.default_metadata_driver'] ?? $this->load('getDoctrine_Orm_DefaultMetadataDriverService.php'));
}, 'doctrine.orm.default_entity_listener_resolver' => function () {
    return ($this->privates['doctrine.orm.default_entity_listener_resolver'] ?? $this->privates['doctrine.orm.default_entity_listener_resolver'] = new \Doctrine\Bundle\DoctrineBundle\Mapping\ContainerAwareEntityListenerResolver($this));
}, 'doctrine.orm.default_listeners.attach_entity_listeners' => function () {
    return ($this->privates['doctrine.orm.default_listeners.attach_entity_listeners'] ?? $this->privates['doctrine.orm.default_listeners.attach_entity_listeners'] = new \Doctrine\ORM\Tools\AttachEntityListenersListener());
}, 'doctrine.orm.default_manager_configurator' => function () {
    return ($this->privates['doctrine.orm.default_manager_configurator'] ?? $this->privates['doctrine.orm.default_manager_configurator'] = new \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator(array(), array()));
}, 'doctrine.orm.default_entity_manager.metadata_factory' => function () {
    return ($this->privates['doctrine.orm.default_entity_manager.metadata_factory'] ?? $this->load('getDoctrine_Orm_DefaultEntityManager_MetadataFactoryService.php'));
}, 'doctrine.orm.default_entity_manager.property_info_extractor' => function () {
    return ($this->privates['doctrine.orm.default_entity_manager.property_info_extractor'] ?? $this->load('getDoctrine_Orm_DefaultEntityManager_PropertyInfoExtractorService.php'));
}, 'doctrine_migrations.diff_command' => function () {
    return ($this->services['console.command.public_alias.doctrine_migrations.diff_command'] ?? $this->services['console.command.public_alias.doctrine_migrations.diff_command'] = new \Doctrine\Bundle\MigrationsBundle\Command\MigrationsDiffDoctrineCommand());
}, 'doctrine_migrations.execute_command' => function () {
    return ($this->services['console.command.public_alias.doctrine_migrations.execute_command'] ?? $this->services['console.command.public_alias.doctrine_migrations.execute_command'] = new \Doctrine\Bundle\MigrationsBundle\Command\MigrationsExecuteDoctrineCommand());
}, 'doctrine_migrations.generate_command' => function () {
    return ($this->services['console.command.public_alias.doctrine_migrations.generate_command'] ?? $this->services['console.command.public_alias.doctrine_migrations.generate_command'] = new \Doctrine\Bundle\MigrationsBundle\Command\MigrationsGenerateDoctrineCommand());
}, 'doctrine_migrations.latest_command' => function () {
    return ($this->services['console.command.public_alias.doctrine_migrations.latest_command'] ?? $this->services['console.command.public_alias.doctrine_migrations.latest_command'] = new \Doctrine\Bundle\MigrationsBundle\Command\MigrationsLatestDoctrineCommand());
}, 'doctrine_migrations.migrate_command' => function () {
    return ($this->services['console.command.public_alias.doctrine_migrations.migrate_command'] ?? $this->services['console.command.public_alias.doctrine_migrations.migrate_command'] = new \Doctrine\Bundle\MigrationsBundle\Command\MigrationsMigrateDoctrineCommand());
}, 'doctrine_migrations.status_command' => function () {
    return ($this->services['console.command.public_alias.doctrine_migrations.status_command'] ?? $this->services['console.command.public_alias.doctrine_migrations.status_command'] = new \Doctrine\Bundle\MigrationsBundle\Command\MigrationsStatusDoctrineCommand());
}, 'doctrine_migrations.version_command' => function () {
    return ($this->services['console.command.public_alias.doctrine_migrations.version_command'] ?? $this->services['console.command.public_alias.doctrine_migrations.version_command'] = new \Doctrine\Bundle\MigrationsBundle\Command\MigrationsVersionDoctrineCommand());
}, 'security.authentication.manager' => function () {
    return ($this->privates['security.authentication.manager'] ?? $this->getSecurity_Authentication_ManagerService());
}, 'security.authentication.trust_resolver' => function () {
    return ($this->privates['security.authentication.trust_resolver'] ?? $this->privates['security.authentication.trust_resolver'] = new \Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver('Symfony\\Component\\Security\\Core\\Authentication\\Token\\AnonymousToken', 'Symfony\\Component\\Security\\Core\\Authentication\\Token\\RememberMeToken'));
}, 'security.authentication.session_strategy' => function () {
    return ($this->privates['security.authentication.session_strategy'] ?? $this->privates['security.authentication.session_strategy'] = new \Symfony\Component\Security\Http\Session\SessionAuthenticationStrategy('migrate'));
}, 'security.encoder_factory.generic' => function () {
    return ($this->privates['security.encoder_factory.generic'] ?? $this->privates['security.encoder_factory.generic'] = new \Symfony\Component\Security\Core\Encoder\EncoderFactory(array()));
}, 'security.user_password_encoder.generic' => function () {
    return ($this->services['security.password_encoder'] ?? $this->load('getSecurity_PasswordEncoderService.php'));
}, 'security.user_checker' => function () {
    return ($this->privates['security.user_checker'] ?? $this->privates['security.user_checker'] = new \Symfony\Component\Security\Core\User\UserChecker());
}, 'security.role_hierarchy' => function () {
    return ($this->privates['security.role_hierarchy'] ?? $this->privates['security.role_hierarchy'] = new \Symfony\Component\Security\Core\Role\RoleHierarchy(array()));
}, 'security.access.simple_role_voter' => function () {
    return ($this->privates['security.access.simple_role_voter'] ?? $this->privates['security.access.simple_role_voter'] = new \Symfony\Component\Security\Core\Authorization\Voter\RoleVoter());
}, 'security.access.authenticated_voter' => function () {
    return ($this->privates['security.access.authenticated_voter'] ?? $this->load('getSecurity_Access_AuthenticatedVoterService.php'));
}, 'security.firewall.map' => function () {
    return ($this->privates['security.firewall.map'] ?? $this->getSecurity_Firewall_MapService());
}, 'security.logout_url_generator' => function () {
    return ($this->privates['security.logout_url_generator'] ?? $this->getSecurity_LogoutUrlGeneratorService());
}, 'security.http_utils' => function () {
    return ($this->privates['security.http_utils'] ?? $this->load('getSecurity_HttpUtilsService.php'));
}, 'security.validator.user_password' => function () {
    return ($this->privates['security.validator.user_password'] ?? $this->load('getSecurity_Validator_UserPasswordService.php'));
}, 'cache.security_expression_language' => function () {
    return ($this->privates['cache.security_expression_language'] ?? $this->getCache_SecurityExpressionLanguageService());
}, 'security.authentication.retry_entry_point' => function () {
    return ($this->privates['security.authentication.retry_entry_point'] ?? $this->privates['security.authentication.retry_entry_point'] = new \Symfony\Component\Security\Http\EntryPoint\RetryAuthenticationEntryPoint(80, 443));
}, 'security.channel_listener' => function () {
    return ($this->privates['security.channel_listener'] ?? $this->load('getSecurity_ChannelListenerService.php'));
}, 'security.access_map' => function () {
    return ($this->privates['security.access_map'] ?? $this->privates['security.access_map'] = new \Symfony\Component\Security\Http\AccessMap());
}, 'security.access_listener' => function () {
    return ($this->privates['security.access_listener'] ?? $this->load('getSecurity_AccessListenerService.php'));
}, 'security.rememberme.response_listener' => function () {
    return ($this->privates['security.rememberme.response_listener'] ?? $this->privates['security.rememberme.response_listener'] = new \Symfony\Component\Security\Http\RememberMe\ResponseListener());
}, 'twig.extension.logout_url' => function () {
    return ($this->privates['twig.extension.logout_url'] ?? $this->getTwig_Extension_LogoutUrlService());
}, 'twig.extension.security' => function () {
    return ($this->privates['twig.extension.security'] ?? $this->getTwig_Extension_SecurityService());
}, 'data_collector.security' => function () {
    return ($this->privates['data_collector.security'] ?? $this->getDataCollector_SecurityService());
}, 'security.authentication.guard_handler' => function () {
    return ($this->privates['security.authentication.guard_handler'] ?? $this->load('getSecurity_Authentication_GuardHandlerService.php'));
}, 'debug.security.access.decision_manager' => function () {
    return ($this->privates['debug.security.access.decision_manager'] ?? $this->getDebug_Security_Access_DecisionManagerService());
}, 'debug.security.firewall' => function () {
    return ($this->privates['debug.security.firewall'] ?? $this->getDebug_Security_FirewallService());
}, 'security.user.provider.concrete.your_db_provider' => function () {
    return ($this->privates['security.user.provider.concrete.your_db_provider'] ?? $this->load('getSecurity_User_Provider_Concrete_YourDbProviderService.php'));
}, 'security.firewall.map.config.dev' => function () {
    return ($this->privates['security.firewall.map.config.dev'] ?? $this->load('getSecurity_Firewall_Map_Config_DevService.php'));
}, 'security.firewall.map.context.dev' => function () {
    return ($this->privates['security.firewall.map.context.dev'] ?? $this->load('getSecurity_Firewall_Map_Context_DevService.php'));
}, 'security.firewall.map.config.main' => function () {
    return ($this->privates['security.firewall.map.config.main'] ?? $this->load('getSecurity_Firewall_Map_Config_MainService.php'));
}, 'security.logout_listener.main' => function () {
    return ($this->privates['security.logout_listener.main'] ?? $this->load('getSecurity_LogoutListener_MainService.php'));
}, 'security.logout.success_handler.main' => function () {
    return ($this->privates['security.logout.success_handler.main'] ?? $this->load('getSecurity_Logout_SuccessHandler_MainService.php'));
}, 'security.authentication.provider.guard.main' => function () {
    return ($this->privates['security.authentication.provider.guard.main'] ?? $this->load('getSecurity_Authentication_Provider_Guard_MainService.php'));
}, 'security.authentication.listener.guard.main' => function () {
    return ($this->privates['security.authentication.listener.guard.main'] ?? $this->load('getSecurity_Authentication_Listener_Guard_MainService.php'));
}, 'security.authentication.listener.anonymous.main' => function () {
    return ($this->privates['security.authentication.listener.anonymous.main'] ?? $this->load('getSecurity_Authentication_Listener_Anonymous_MainService.php'));
}, 'security.authentication.provider.anonymous.main' => function () {
    return ($this->privates['security.authentication.provider.anonymous.main'] ?? $this->privates['security.authentication.provider.anonymous.main'] = new \Symfony\Component\Security\Core\Authentication\Provider\AnonymousAuthenticationProvider($this->getParameter('container.build_hash')));
}, 'security.exception_listener.main' => function () {
    return ($this->privates['security.exception_listener.main'] ?? $this->load('getSecurity_ExceptionListener_MainService.php'));
}, 'security.firewall.map.context.main' => function () {
    return ($this->privates['security.firewall.map.context.main'] ?? $this->load('getSecurity_Firewall_Map_Context_MainService.php'));
}, 'security.command.user_password_encoder' => function () {
    return ($this->privates['security.command.user_password_encoder'] ?? $this->load('getSecurity_Command_UserPasswordEncoderService.php'));
}, 'monolog.logger' => function () {
    return ($this->privates['monolog.logger'] ?? $this->getMonolog_LoggerService());
}, 'monolog.processor.psr_log_message' => function () {
    return ($this->privates['monolog.processor.psr_log_message'] ?? $this->privates['monolog.processor.psr_log_message'] = new \Monolog\Processor\PsrLogMessageProcessor());
}, 'monolog.handler.main' => function () {
    return ($this->privates['monolog.handler.main'] ?? $this->getMonolog_Handler_MainService());
}, 'fos_rest.view_handler.default' => function () {
    return ($this->services['fos_rest.view_handler'] ?? $this->load('getFosRest_ViewHandlerService.php'));
}, 'fos_rest.routing.loader.directory' => function () {
    return ($this->privates['fos_rest.routing.loader.directory'] ?? $this->load('getFosRest_Routing_Loader_DirectoryService.php'));
}, 'fos_rest.routing.loader.controller' => function () {
    return ($this->privates['fos_rest.routing.loader.controller'] ?? $this->load('getFosRest_Routing_Loader_ControllerService.php'));
}, 'fos_rest.routing.loader.processor' => function () {
    return ($this->privates['fos_rest.routing.loader.processor'] ?? $this->privates['fos_rest.routing.loader.processor'] = new \FOS\RestBundle\Routing\Loader\RestRouteProcessor());
}, 'fos_rest.routing.loader.yaml_collection' => function () {
    return ($this->privates['fos_rest.routing.loader.yaml_collection'] ?? $this->load('getFosRest_Routing_Loader_YamlCollectionService.php'));
}, 'fos_rest.routing.loader.xml_collection' => function () {
    return ($this->privates['fos_rest.routing.loader.xml_collection'] ?? $this->load('getFosRest_Routing_Loader_XmlCollectionService.php'));
}, 'fos_rest.routing.loader.reader.controller' => function () {
    return ($this->privates['fos_rest.routing.loader.reader.controller'] ?? $this->load('getFosRest_Routing_Loader_Reader_ControllerService.php'));
}, 'fos_rest.routing.loader.reader.action' => function () {
    return ($this->privates['fos_rest.routing.loader.reader.action'] ?? $this->load('getFosRest_Routing_Loader_Reader_ActionService.php'));
}, 'fos_rest.inflector.doctrine' => function () {
    return ($this->privates['fos_rest.inflector.doctrine'] ?? $this->privates['fos_rest.inflector.doctrine'] = new \FOS\RestBundle\Inflector\DoctrineInflector());
}, 'fos_rest.request.param_fetcher' => function () {
    return ($this->privates['fos_rest.request.param_fetcher'] ?? $this->getFosRest_Request_ParamFetcherService());
}, 'fos_rest.request.param_fetcher.reader' => function () {
    return ($this->privates['fos_rest.request.param_fetcher.reader'] ?? $this->getFosRest_Request_ParamFetcher_ReaderService());
}, 'fos_rest.serializer.symfony' => function () {
    return ($this->privates['fos_rest.serializer.symfony'] ?? $this->getFosRest_Serializer_SymfonyService());
}, 'fos_rest.serializer.form_error_normalizer' => function () {
    return ($this->privates['fos_rest.serializer.form_error_normalizer'] ?? $this->getFosRest_Serializer_FormErrorNormalizerService());
}, 'fos_rest.converter.request_body' => function () {
    return ($this->privates['fos_rest.converter.request_body'] ?? $this->getFosRest_Converter_RequestBodyService());
}, 'fos_rest.view_response_listener' => function () {
    return ($this->privates['fos_rest.view_response_listener'] ?? $this->load('getFosRest_ViewResponseListenerService.php'));
}, 'fos_rest.decoder.json' => function () {
    return ($this->privates['fos_rest.decoder.json'] ?? $this->privates['fos_rest.decoder.json'] = new \FOS\RestBundle\Decoder\JsonDecoder());
}, 'fos_rest.decoder.xml' => function () {
    return ($this->privates['fos_rest.decoder.xml'] ?? $this->privates['fos_rest.decoder.xml'] = new \FOS\RestBundle\Decoder\XmlDecoder());
}, 'fos_rest.decoder_provider' => function () {
    return ($this->privates['fos_rest.decoder_provider'] ?? $this->getFosRest_DecoderProviderService());
}, 'fos_rest.body_listener' => function () {
    return ($this->privates['fos_rest.body_listener'] ?? $this->getFosRest_BodyListenerService());
}, 'fos_rest.param_fetcher_listener' => function () {
    return ($this->privates['fos_rest.param_fetcher_listener'] ?? $this->getFosRest_ParamFetcherListenerService());
}, 'sensio_framework_extra.controller.listener' => function () {
    return ($this->privates['sensio_framework_extra.controller.listener'] ?? $this->getSensioFrameworkExtra_Controller_ListenerService());
}, 'sensio_framework_extra.converter.listener' => function () {
    return ($this->privates['sensio_framework_extra.converter.listener'] ?? $this->getSensioFrameworkExtra_Converter_ListenerService());
}, 'sensio_framework_extra.converter.manager' => function () {
    return ($this->privates['sensio_framework_extra.converter.manager'] ?? $this->getSensioFrameworkExtra_Converter_ManagerService());
}, 'sensio_framework_extra.converter.doctrine.orm' => function () {
    return ($this->privates['sensio_framework_extra.converter.doctrine.orm'] ?? $this->getSensioFrameworkExtra_Converter_Doctrine_OrmService());
}, 'framework_extra_bundle.date_time_param_converter' => function () {
    return ($this->privates['framework_extra_bundle.date_time_param_converter'] ?? $this->privates['framework_extra_bundle.date_time_param_converter'] = new \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DateTimeParamConverter());
}, 'sensio_framework_extra.view.guesser' => function () {
    return ($this->privates['sensio_framework_extra.view.guesser'] ?? $this->privates['sensio_framework_extra.view.guesser'] = new \Sensio\Bundle\FrameworkExtraBundle\Templating\TemplateGuesser(($this->services['kernel'] ?? $this->get('kernel', 1))));
}, 'sensio_framework_extra.view.listener' => function () {
    return ($this->privates['sensio_framework_extra.view.listener'] ?? $this->getSensioFrameworkExtra_View_ListenerService());
}, 'sensio_framework_extra.cache.listener' => function () {
    return ($this->privates['sensio_framework_extra.cache.listener'] ?? $this->privates['sensio_framework_extra.cache.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\HttpCacheListener());
}, 'sensio_framework_extra.security.listener' => function () {
    return ($this->privates['sensio_framework_extra.security.listener'] ?? $this->getSensioFrameworkExtra_Security_ListenerService());
}, 'framework_extra_bundle.event.is_granted' => function () {
    return ($this->privates['framework_extra_bundle.event.is_granted'] ?? $this->getFrameworkExtraBundle_Event_IsGrantedService());
}, 'framework_extra_bundle.argument_name_convertor' => function () {
    return ($this->privates['framework_extra_bundle.argument_name_convertor'] ?? $this->getFrameworkExtraBundle_ArgumentNameConvertorService());
}, 'web_profiler.csp.handler' => function () {
    return ($this->privates['web_profiler.csp.handler'] ?? $this->load('getWebProfiler_Csp_HandlerService.php'));
}, 'twig.extension.webprofiler' => function () {
    return ($this->privates['twig.extension.webprofiler'] ?? $this->getTwig_Extension_WebprofilerService());
}, 'debug.file_link_formatter.url_format' => function () {
    return ($this->privates['debug.file_link_formatter.url_format'] ?? $this->load('getDebug_FileLinkFormatter_UrlFormatService.php'));
}, 'twig.app_variable' => function () {
    return ($this->privates['twig.app_variable'] ?? $this->getTwig_AppVariableService());
}, 'twig.cache_warmer' => function () {
    return ($this->privates['twig.cache_warmer'] ?? $this->load('getTwig_CacheWarmerService.php'));
}, 'twig.template_iterator' => function () {
    return ($this->privates['twig.template_iterator'] ?? $this->privates['twig.template_iterator'] = new \Symfony\Bundle\TwigBundle\TemplateIterator(($this->services['kernel'] ?? $this->get('kernel', 1)), '/app/src', array('/app/templates' => NULL)));
}, 'twig.template_cache_warmer' => function () {
    return ($this->privates['twig.template_cache_warmer'] ?? $this->load('getTwig_TemplateCacheWarmerService.php'));
}, 'twig.loader.native_filesystem' => function () {
    return ($this->privates['twig.loader.native_filesystem'] ?? $this->getTwig_Loader_NativeFilesystemService());
}, 'twig.extension.profiler' => function () {
    return ($this->privates['twig.extension.profiler'] ?? $this->getTwig_Extension_ProfilerService());
}, 'twig.profile' => function () {
    return ($this->privates['twig.profile'] ?? $this->privates['twig.profile'] = new \Twig\Profiler\Profile());
}, 'data_collector.twig' => function () {
    return ($this->privates['data_collector.twig'] ?? $this->getDataCollector_TwigService());
}, 'twig.extension.trans' => function () {
    return ($this->privates['twig.extension.trans'] ?? $this->getTwig_Extension_TransService());
}, 'twig.extension.assets' => function () {
    return ($this->privates['twig.extension.assets'] ?? $this->getTwig_Extension_AssetsService());
}, 'twig.extension.code' => function () {
    return ($this->privates['twig.extension.code'] ?? $this->getTwig_Extension_CodeService());
}, 'twig.extension.routing' => function () {
    return ($this->privates['twig.extension.routing'] ?? $this->getTwig_Extension_RoutingService());
}, 'twig.extension.yaml' => function () {
    return ($this->privates['twig.extension.yaml'] ?? $this->privates['twig.extension.yaml'] = new \Symfony\Bridge\Twig\Extension\YamlExtension());
}, 'twig.extension.debug.stopwatch' => function () {
    return ($this->privates['twig.extension.debug.stopwatch'] ?? $this->getTwig_Extension_Debug_StopwatchService());
}, 'twig.extension.httpkernel' => function () {
    return ($this->privates['twig.extension.httpkernel'] ?? $this->privates['twig.extension.httpkernel'] = new \Symfony\Bridge\Twig\Extension\HttpKernelExtension());
}, 'twig.runtime.httpkernel' => function () {
    return ($this->privates['twig.runtime.httpkernel'] ?? $this->load('getTwig_Runtime_HttpkernelService.php'));
}, 'twig.extension.httpfoundation' => function () {
    return ($this->privates['twig.extension.httpfoundation'] ?? $this->getTwig_Extension_HttpfoundationService());
}, 'twig.extension.debug' => function () {
    return ($this->privates['twig.extension.debug'] ?? $this->privates['twig.extension.debug'] = new \Twig\Extension\DebugExtension());
}, 'twig.translation.extractor' => function () {
    return ($this->privates['twig.translation.extractor'] ?? $this->load('getTwig_Translation_ExtractorService.php'));
}, 'twig.exception_listener' => function () {
    return ($this->privates['twig.exception_listener'] ?? $this->load('getTwig_ExceptionListenerService.php'));
}, 'twig.configurator.environment' => function () {
    return ($this->privates['twig.configurator.environment'] ?? $this->getTwig_Configurator_EnvironmentService());
}, 'twig.runtime_loader' => function () {
    return ($this->privates['twig.runtime_loader'] ?? $this->getTwig_RuntimeLoaderService());
}, 'twig.command.debug' => function () {
    return ($this->privates['twig.command.debug'] ?? $this->load('getTwig_Command_DebugService.php'));
}, 'twig.command.lint' => function () {
    return ($this->privates['twig.command.lint'] ?? $this->load('getTwig_Command_LintService.php'));
}, 'nelmio_alice.file_parser.runtime_cache' => function () {
    return ($this->privates['nelmio_alice.file_parser.runtime_cache'] ?? $this->load('getNelmioAlice_FileParser_RuntimeCacheService.php'));
}, 'nelmio_alice.file_parser.symfony_yaml' => function () {
    return ($this->privates['nelmio_alice.file_parser.symfony_yaml'] ?? $this->privates['nelmio_alice.file_parser.symfony_yaml'] = new \Symfony\Component\Yaml\Parser());
}, 'nelmio_alice.file_parser.default_include_processor' => function () {
    return ($this->privates['nelmio_alice.file_parser.default_include_processor'] ?? $this->load('getNelmioAlice_FileParser_DefaultIncludeProcessorService.php'));
}, 'nelmio_alice.file_parser.registry' => function () {
    return ($this->privates['nelmio_alice.file_parser.registry'] ?? $this->load('getNelmioAlice_FileParser_RegistryService.php'));
}, 'nelmio_alice.file_parser.chainable.yaml' => function () {
    return ($this->privates['nelmio_alice.file_parser.chainable.yaml'] ?? $this->load('getNelmioAlice_FileParser_Chainable_YamlService.php'));
}, 'nelmio_alice.file_parser.chainable.php' => function () {
    return ($this->privates['nelmio_alice.file_parser.chainable.php'] ?? $this->privates['nelmio_alice.file_parser.chainable.php'] = new \Nelmio\Alice\Parser\Chainable\PhpParser());
}, 'nelmio_alice.file_parser.chainable.json' => function () {
    return ($this->privates['nelmio_alice.file_parser.chainable.json'] ?? $this->privates['nelmio_alice.file_parser.chainable.json'] = new \Nelmio\Alice\Parser\Chainable\JsonParser());
}, 'nelmio_alice.property_accessor.std' => function () {
    return ($this->privates['nelmio_alice.property_accessor.std'] ?? $this->load('getNelmioAlice_PropertyAccessor_StdService.php'));
}, 'nelmio_alice.generator.double_pass' => function () {
    return ($this->privates['nelmio_alice.generator.double_pass'] ?? $this->load('getNelmioAlice_Generator_DoublePassService.php'));
}, 'nelmio_alice.generator.object_generator.complete' => function () {
    return ($this->privates['nelmio_alice.generator.object_generator.complete'] ?? $this->load('getNelmioAlice_Generator_ObjectGenerator_CompleteService.php'));
}, 'nelmio_alice.generator.object_generator.simple' => function () {
    return ($this->privates['nelmio_alice.generator.object_generator.simple'] ?? $this->load('getNelmioAlice_Generator_ObjectGenerator_SimpleService.php'));
}, 'nelmio_alice.generator.caller.simple' => function () {
    return ($this->privates['nelmio_alice.generator.caller.simple'] ?? $this->load('getNelmioAlice_Generator_Caller_SimpleService.php'));
}, 'nelmio_alice.generator.caller.registry' => function () {
    return ($this->privates['nelmio_alice.generator.caller.registry'] ?? $this->load('getNelmioAlice_Generator_Caller_RegistryService.php'));
}, 'nelmio_alice.generator.caller.chainable.configurator_method_call' => function () {
    return ($this->privates['nelmio_alice.generator.caller.chainable.configurator_method_call'] ?? $this->privates['nelmio_alice.generator.caller.chainable.configurator_method_call'] = new \Nelmio\Alice\Generator\Caller\Chainable\ConfiguratorMethodCallProcessor());
}, 'nelmio_alice.generator.caller.chainable.method_call_with_reference' => function () {
    return ($this->privates['nelmio_alice.generator.caller.chainable.method_call_with_reference'] ?? $this->privates['nelmio_alice.generator.caller.chainable.method_call_with_reference'] = new \Nelmio\Alice\Generator\Caller\Chainable\MethodCallWithReferenceProcessor());
}, 'nelmio_alice.generator.caller.chainable.optional_method_call' => function () {
    return ($this->privates['nelmio_alice.generator.caller.chainable.optional_method_call'] ?? $this->privates['nelmio_alice.generator.caller.chainable.optional_method_call'] = new \Nelmio\Alice\Generator\Caller\Chainable\OptionalMethodCallProcessor());
}, 'nelmio_alice.generator.caller.chainable.simple_call' => function () {
    return ($this->privates['nelmio_alice.generator.caller.chainable.simple_call'] ?? $this->privates['nelmio_alice.generator.caller.chainable.simple_call'] = new \Nelmio\Alice\Generator\Caller\Chainable\SimpleMethodCallProcessor());
}, 'nelmio_alice.generator.hydrator.simple' => function () {
    return ($this->privates['nelmio_alice.generator.hydrator.simple'] ?? $this->load('getNelmioAlice_Generator_Hydrator_SimpleService.php'));
}, 'nelmio_alice.generator.hydrator.property.symfony_property_access' => function () {
    return ($this->privates['nelmio_alice.generator.hydrator.property.symfony_property_access'] ?? $this->load('getNelmioAlice_Generator_Hydrator_Property_SymfonyPropertyAccessService.php'));
}, 'nelmio_alice.generator.resolver.fixture_bag.template_bag' => function () {
    return ($this->privates['nelmio_alice.generator.resolver.fixture_bag.template_bag'] ?? $this->privates['nelmio_alice.generator.resolver.fixture_bag.template_bag'] = new \Nelmio\Alice\Generator\Resolver\Fixture\TemplateFixtureBagResolver());
}, 'nelmio_alice.generator.resolver.fixture_set.remove_conflicting_objects' => function () {
    return ($this->privates['nelmio_alice.generator.resolver.fixture_set.remove_conflicting_objects'] ?? $this->load('getNelmioAlice_Generator_Resolver_FixtureSet_RemoveConflictingObjectsService.php'));
}, 'nelmio_alice.generator.resolver.fixture_set.simple' => function () {
    return ($this->privates['nelmio_alice.generator.resolver.fixture_set.simple'] ?? $this->load('getNelmioAlice_Generator_Resolver_FixtureSet_SimpleService.php'));
}, 'nelmio_alice.generator.resolver.value.registry' => function () {
    return ($this->privates['nelmio_alice.generator.resolver.value.registry'] ?? $this->load('getNelmioAlice_Generator_Resolver_Value_RegistryService.php'));
}, 'nelmio_alice.generator.resolver.value.unique_values_pool' => function () {
    return ($this->privates['nelmio_alice.generator.resolver.value.unique_values_pool'] ?? $this->privates['nelmio_alice.generator.resolver.value.unique_values_pool'] = new \Nelmio\Alice\Generator\Resolver\UniqueValuesPool());
}, 'nelmio_alice.generator.resolver.value.chainable.array_value_resolver' => function () {
    return ($this->privates['nelmio_alice.generator.resolver.value.chainable.array_value_resolver'] ?? $this->privates['nelmio_alice.generator.resolver.value.chainable.array_value_resolver'] = new \Nelmio\Alice\Generator\Resolver\Value\Chainable\ArrayValueResolver());
}, 'nelmio_alice.generator.resolver.value.chainable.dynamic_array_value_resolver' => function () {
    return ($this->privates['nelmio_alice.generator.resolver.value.chainable.dynamic_array_value_resolver'] ?? $this->privates['nelmio_alice.generator.resolver.value.chainable.dynamic_array_value_resolver'] = new \Nelmio\Alice\Generator\Resolver\Value\Chainable\DynamicArrayValueResolver(NULL, 5));
}, 'nelmio_alice.generator.resolver.value.chainable.evaluated_value_resolver' => function () {
    return ($this->privates['nelmio_alice.generator.resolver.value.chainable.evaluated_value_resolver'] ?? $this->privates['nelmio_alice.generator.resolver.value.chainable.evaluated_value_resolver'] = new \Nelmio\Alice\Generator\Resolver\Value\Chainable\EvaluatedValueResolver());
}, 'nelmio_alice.generator.resolver.value.chainable.faker_value_resolver' => function () {
    return ($this->privates['nelmio_alice.generator.resolver.value.chainable.faker_value_resolver'] ?? $this->load('getNelmioAlice_Generator_Resolver_Value_Chainable_FakerValueResolverService.php'));
}, 'nelmio_alice.generator.resolver.value.chainable.php_value_resolver' => function () {
    return ($this->privates['nelmio_alice.generator.resolver.value.chainable.php_value_resolver'] ?? $this->load('getNelmioAlice_Generator_Resolver_Value_Chainable_PhpValueResolverService.php'));
}, 'nelmio_alice.generator.resolver.value.chainable.function_argument_resolver' => function () {
    return ($this->privates['nelmio_alice.generator.resolver.value.chainable.function_argument_resolver'] ?? $this->load('getNelmioAlice_Generator_Resolver_Value_Chainable_FunctionArgumentResolverService.php'));
}, 'nelmio_alice.generator.resolver.value.chainable.fixture_property_reference_resolver' => function () {
    return ($this->privates['nelmio_alice.generator.resolver.value.chainable.fixture_property_reference_resolver'] ?? $this->load('getNelmioAlice_Generator_Resolver_Value_Chainable_FixturePropertyReferenceResolverService.php'));
}, 'nelmio_alice.generator.resolver.value.chainable.fixture_method_call_reference_resolver' => function () {
    return ($this->privates['nelmio_alice.generator.resolver.value.chainable.fixture_method_call_reference_resolver'] ?? $this->privates['nelmio_alice.generator.resolver.value.chainable.fixture_method_call_reference_resolver'] = new \Nelmio\Alice\Generator\Resolver\Value\Chainable\FixtureMethodCallReferenceResolver());
}, 'nelmio_alice.generator.resolver.value.chainable.fixture_reference_resolver' => function () {
    return ($this->privates['nelmio_alice.generator.resolver.value.chainable.fixture_reference_resolver'] ?? $this->privates['nelmio_alice.generator.resolver.value.chainable.fixture_reference_resolver'] = new \Nelmio\Alice\Generator\Resolver\Value\Chainable\FixtureReferenceResolver());
}, 'nelmio_alice.generator.resolver.value.chainable.self_fixture_reference_resolver' => function () {
    return ($this->privates['nelmio_alice.generator.resolver.value.chainable.self_fixture_reference_resolver'] ?? $this->load('getNelmioAlice_Generator_Resolver_Value_Chainable_SelfFixtureReferenceResolverService.php'));
}, 'nelmio_alice.generator.resolver.value.chainable.unresolved_fixture_reference_resolver' => function () {
    return ($this->privates['nelmio_alice.generator.resolver.value.chainable.unresolved_fixture_reference_resolver'] ?? $this->load('getNelmioAlice_Generator_Resolver_Value_Chainable_UnresolvedFixtureReferenceResolverService.php'));
}, 'nelmio_alice.generator.resolver.value.chainable.fixture_wildcard_reference_resolver' => function () {
    return ($this->privates['nelmio_alice.generator.resolver.value.chainable.fixture_wildcard_reference_resolver'] ?? $this->privates['nelmio_alice.generator.resolver.value.chainable.fixture_wildcard_reference_resolver'] = new \Nelmio\Alice\Generator\Resolver\Value\Chainable\FixtureWildcardReferenceResolver());
}, 'nelmio_alice.generator.resolver.value.chainable.list_value_resolver' => function () {
    return ($this->privates['nelmio_alice.generator.resolver.value.chainable.list_value_resolver'] ?? $this->privates['nelmio_alice.generator.resolver.value.chainable.list_value_resolver'] = new \Nelmio\Alice\Generator\Resolver\Value\Chainable\ListValueResolver());
}, 'nelmio_alice.generator.resolver.value.chainable.optional_value_resolver' => function () {
    return ($this->privates['nelmio_alice.generator.resolver.value.chainable.optional_value_resolver'] ?? $this->privates['nelmio_alice.generator.resolver.value.chainable.optional_value_resolver'] = new \Nelmio\Alice\Generator\Resolver\Value\Chainable\OptionalValueResolver());
}, 'nelmio_alice.generator.resolver.value.chainable.parameter_value_resolver' => function () {
    return ($this->privates['nelmio_alice.generator.resolver.value.chainable.parameter_value_resolver'] ?? $this->privates['nelmio_alice.generator.resolver.value.chainable.parameter_value_resolver'] = new \Nelmio\Alice\Generator\Resolver\Value\Chainable\ParameterValueResolver());
}, 'nelmio_alice.generator.resolver.value.chainable.unique_value_resolver' => function () {
    return ($this->privates['nelmio_alice.generator.resolver.value.chainable.unique_value_resolver'] ?? $this->load('getNelmioAlice_Generator_Resolver_Value_Chainable_UniqueValueResolverService.php'));
}, 'nelmio_alice.generator.resolver.value.chainable.value_for_current_value_resolver' => function () {
    return ($this->privates['nelmio_alice.generator.resolver.value.chainable.value_for_current_value_resolver'] ?? $this->privates['nelmio_alice.generator.resolver.value.chainable.value_for_current_value_resolver'] = new \Nelmio\Alice\Generator\Resolver\Value\Chainable\ValueForCurrentValueResolver());
}, 'nelmio_alice.generator.resolver.value.chainable.variable_value_resolver' => function () {
    return ($this->privates['nelmio_alice.generator.resolver.value.chainable.variable_value_resolver'] ?? $this->privates['nelmio_alice.generator.resolver.value.chainable.variable_value_resolver'] = new \Nelmio\Alice\Generator\Resolver\Value\Chainable\VariableValueResolver());
}, 'nelmio_alice.generator.resolver.parameter_bag.remove_conflicting_parameters' => function () {
    return ($this->privates['nelmio_alice.generator.resolver.parameter_bag.remove_conflicting_parameters'] ?? $this->load('getNelmioAlice_Generator_Resolver_ParameterBag_RemoveConflictingParametersService.php'));
}, 'nelmio_alice.generator.resolver.parameter_bag.simple' => function () {
    return ($this->privates['nelmio_alice.generator.resolver.parameter_bag.simple'] ?? $this->load('getNelmioAlice_Generator_Resolver_ParameterBag_SimpleService.php'));
}, 'nelmio_alice.generator.resolver.parameter.registry' => function () {
    return ($this->privates['nelmio_alice.generator.resolver.parameter.registry'] ?? $this->load('getNelmioAlice_Generator_Resolver_Parameter_RegistryService.php'));
}, 'nelmio_alice.generator.resolver.parameter.chainable.static_parameter_resolver' => function () {
    return ($this->privates['nelmio_alice.generator.resolver.parameter.chainable.static_parameter_resolver'] ?? $this->privates['nelmio_alice.generator.resolver.parameter.chainable.static_parameter_resolver'] = new \Nelmio\Alice\Generator\Resolver\Parameter\Chainable\StaticParameterResolver());
}, 'nelmio_alice.generator.resolver.parameter.chainable.array_parameter_resolver' => function () {
    return ($this->privates['nelmio_alice.generator.resolver.parameter.chainable.array_parameter_resolver'] ?? $this->privates['nelmio_alice.generator.resolver.parameter.chainable.array_parameter_resolver'] = new \Nelmio\Alice\Generator\Resolver\Parameter\Chainable\ArrayParameterResolver());
}, 'nelmio_alice.generator.resolver.parameter.chainable.recursive_parameter_resolver' => function () {
    return ($this->privates['nelmio_alice.generator.resolver.parameter.chainable.recursive_parameter_resolver'] ?? $this->load('getNelmioAlice_Generator_Resolver_Parameter_Chainable_RecursiveParameterResolverService.php'));
}, 'nelmio_alice.generator.resolver.parameter.chainable.string_parameter_resolver' => function () {
    return ($this->privates['nelmio_alice.generator.resolver.parameter.chainable.string_parameter_resolver'] ?? $this->privates['nelmio_alice.generator.resolver.parameter.chainable.string_parameter_resolver'] = new \Nelmio\Alice\Generator\Resolver\Parameter\Chainable\StringParameterResolver());
}, 'nelmio_alice.generator.instantiator.existing_instance' => function () {
    return ($this->privates['nelmio_alice.generator.instantiator.existing_instance'] ?? $this->load('getNelmioAlice_Generator_Instantiator_ExistingInstanceService.php'));
}, 'nelmio_alice.generator.instantiator.resolver' => function () {
    return ($this->privates['nelmio_alice.generator.instantiator.resolver'] ?? $this->load('getNelmioAlice_Generator_Instantiator_ResolverService.php'));
}, 'nelmio_alice.generator.instantiator.registry' => function () {
    return ($this->privates['nelmio_alice.generator.instantiator.registry'] ?? $this->load('getNelmioAlice_Generator_Instantiator_RegistryService.php'));
}, 'nelmio_alice.generator.instantiator.chainable.no_caller_method_instantiator' => function () {
    return ($this->privates['nelmio_alice.generator.instantiator.chainable.no_caller_method_instantiator'] ?? $this->privates['nelmio_alice.generator.instantiator.chainable.no_caller_method_instantiator'] = new \Nelmio\Alice\Generator\Instantiator\Chainable\NoCallerMethodCallInstantiator());
}, 'nelmio_alice.generator.instantiator.chainable.null_constructor_instantiator' => function () {
    return ($this->privates['nelmio_alice.generator.instantiator.chainable.null_constructor_instantiator'] ?? $this->privates['nelmio_alice.generator.instantiator.chainable.null_constructor_instantiator'] = new \Nelmio\Alice\Generator\Instantiator\Chainable\NullConstructorInstantiator());
}, 'nelmio_alice.generator.instantiator.chainable.no_method_call_instantiator' => function () {
    return ($this->privates['nelmio_alice.generator.instantiator.chainable.no_method_call_instantiator'] ?? $this->privates['nelmio_alice.generator.instantiator.chainable.no_method_call_instantiator'] = new \Nelmio\Alice\Generator\Instantiator\Chainable\NoMethodCallInstantiator());
}, 'nelmio_alice.generator.instantiator.chainable.static_factory_instantiator' => function () {
    return ($this->privates['nelmio_alice.generator.instantiator.chainable.static_factory_instantiator'] ?? $this->privates['nelmio_alice.generator.instantiator.chainable.static_factory_instantiator'] = new \Nelmio\Alice\Generator\Instantiator\Chainable\StaticFactoryInstantiator());
}, 'nelmio_alice.fixture_builder.simple' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.simple'] ?? $this->load('getNelmioAlice_FixtureBuilder_SimpleService.php'));
}, 'nelmio_alice.fixture_builder.denormalizer.simple' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.denormalizer.simple'] ?? $this->load('getNelmioAlice_FixtureBuilder_Denormalizer_SimpleService.php'));
}, 'nelmio_alice.fixture_builder.denormalizer.parameter.simple_parameter_bag_denormalizer' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.denormalizer.parameter.simple_parameter_bag_denormalizer'] ?? $this->privates['nelmio_alice.fixture_builder.denormalizer.parameter.simple_parameter_bag_denormalizer'] = new \Nelmio\Alice\FixtureBuilder\Denormalizer\Parameter\SimpleParameterBagDenormalizer());
}, 'nelmio_alice.fixture_builder.expression_language.parser.function_fixture_reference_parser' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.expression_language.parser.function_fixture_reference_parser'] ?? $this->load('getNelmioAlice_FixtureBuilder_ExpressionLanguage_Parser_FunctionFixtureReferenceParserService.php'));
}, 'nelmio_alice.fixture_builder.expression_language.parser.string_parser' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.expression_language.parser.string_parser'] ?? $this->load('getNelmioAlice_FixtureBuilder_ExpressionLanguage_Parser_StringParserService.php'));
}, 'nelmio_alice.fixture_builder.expression_language.parser.simple_parser' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.expression_language.parser.simple_parser'] ?? $this->load('getNelmioAlice_FixtureBuilder_ExpressionLanguage_Parser_SimpleParserService.php'));
}, 'nelmio_alice.fixture_builder.expression_language.parser.token_parser.registry' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.expression_language.parser.token_parser.registry'] ?? $this->load('getNelmioAlice_FixtureBuilder_ExpressionLanguage_Parser_TokenParser_RegistryService.php'));
}, 'nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.argument_escaper' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.argument_escaper'] ?? $this->privates['nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.argument_escaper'] = new \Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\ArgumentEscaper());
}, 'nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.dynamic_array_token_parser' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.dynamic_array_token_parser'] ?? $this->privates['nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.dynamic_array_token_parser'] = new \Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\DynamicArrayTokenParser());
}, 'nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.escaped_value_token_parser' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.escaped_value_token_parser'] ?? $this->privates['nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.escaped_value_token_parser'] = new \Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\EscapedValueTokenParser());
}, 'nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.fixture_list_reference_token_parser' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.fixture_list_reference_token_parser'] ?? $this->privates['nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.fixture_list_reference_token_parser'] = new \Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\FixtureListReferenceTokenParser());
}, 'nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.fixture_method_reference_token_parser' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.fixture_method_reference_token_parser'] ?? $this->privates['nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.fixture_method_reference_token_parser'] = new \Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\FixtureMethodReferenceTokenParser());
}, 'nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.fixture_range_reference_token_parser' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.fixture_range_reference_token_parser'] ?? $this->privates['nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.fixture_range_reference_token_parser'] = new \Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\FixtureRangeReferenceTokenParser());
}, 'nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.method_reference_token_parser' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.method_reference_token_parser'] ?? $this->privates['nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.method_reference_token_parser'] = new \Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\MethodReferenceTokenParser());
}, 'nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.optional_token_parser' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.optional_token_parser'] ?? $this->privates['nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.optional_token_parser'] = new \Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\OptionalTokenParser());
}, 'nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.parameter_token_parser' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.parameter_token_parser'] ?? $this->privates['nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.parameter_token_parser'] = new \Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\ParameterTokenParser());
}, 'nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.property_reference_token_parser' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.property_reference_token_parser'] ?? $this->privates['nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.property_reference_token_parser'] = new \Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\PropertyReferenceTokenParser());
}, 'nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.variable_reference_token_parser' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.variable_reference_token_parser'] ?? $this->privates['nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.variable_reference_token_parser'] = new \Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\VariableReferenceTokenParser());
}, 'nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.simple_reference_token_parser' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.simple_reference_token_parser'] ?? $this->privates['nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.simple_reference_token_parser'] = new \Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\SimpleReferenceTokenParser());
}, 'nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.string_array_token_parser' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.string_array_token_parser'] ?? $this->privates['nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.string_array_token_parser'] = new \Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\StringArrayTokenParser());
}, 'nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.string_token_parser' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.string_token_parser'] ?? $this->load('getNelmioAlice_FixtureBuilder_ExpressionLanguage_Parser_TokenParser_Chainable_StringTokenParserService.php'));
}, 'nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.tolerant_function_token_parser' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.tolerant_function_token_parser'] ?? $this->load('getNelmioAlice_FixtureBuilder_ExpressionLanguage_Parser_TokenParser_Chainable_TolerantFunctionTokenParserService.php'));
}, 'nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.identity_token_parser' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.identity_token_parser'] ?? $this->load('getNelmioAlice_FixtureBuilder_ExpressionLanguage_Parser_TokenParser_Chainable_IdentityTokenParserService.php'));
}, 'nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.function_token_parser' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.function_token_parser'] ?? $this->load('getNelmioAlice_FixtureBuilder_ExpressionLanguage_Parser_TokenParser_Chainable_FunctionTokenParserService.php'));
}, 'nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.variable_token_parser' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.variable_token_parser'] ?? $this->privates['nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.variable_token_parser'] = new \Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\VariableTokenParser());
}, 'nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.wildcard_reference_token_parser' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.wildcard_reference_token_parser'] ?? $this->privates['nelmio_alice.fixture_builder.expression_language.parser.token_parser.chainable.wildcard_reference_token_parser'] = new \Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Parser\TokenParser\Chainable\WildcardReferenceTokenParser());
}, 'nelmio_alice.fixture_builder.expression_language.lexer.empty_value_lexer' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.expression_language.lexer.empty_value_lexer'] ?? $this->load('getNelmioAlice_FixtureBuilder_ExpressionLanguage_Lexer_EmptyValueLexerService.php'));
}, 'nelmio_alice.fixture_builder.expression_language.lexer.reference_escaper_lexer' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.expression_language.lexer.reference_escaper_lexer'] ?? $this->load('getNelmioAlice_FixtureBuilder_ExpressionLanguage_Lexer_ReferenceEscaperLexerService.php'));
}, 'nelmio_alice.fixture_builder.expression_language.lexer.globals_patterns_lexer' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.expression_language.lexer.globals_patterns_lexer'] ?? $this->load('getNelmioAlice_FixtureBuilder_ExpressionLanguage_Lexer_GlobalsPatternsLexerService.php'));
}, 'nelmio_alice.fixture_builder.expression_language.lexer.function_lexer' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.expression_language.lexer.function_lexer'] ?? $this->load('getNelmioAlice_FixtureBuilder_ExpressionLanguage_Lexer_FunctionLexerService.php'));
}, 'nelmio_alice.fixture_builder.expression_language.lexer.string_then_reference_lexer' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.expression_language.lexer.string_then_reference_lexer'] ?? $this->load('getNelmioAlice_FixtureBuilder_ExpressionLanguage_Lexer_StringThenReferenceLexerService.php'));
}, 'nelmio_alice.fixture_builder.expression_language.lexer.sub_patterns_lexer' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.expression_language.lexer.sub_patterns_lexer'] ?? $this->load('getNelmioAlice_FixtureBuilder_ExpressionLanguage_Lexer_SubPatternsLexerService.php'));
}, 'nelmio_alice.fixture_builder.expression_language.lexer.reference_lexer' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.expression_language.lexer.reference_lexer'] ?? $this->privates['nelmio_alice.fixture_builder.expression_language.lexer.reference_lexer'] = new \Nelmio\Alice\FixtureBuilder\ExpressionLanguage\Lexer\ReferenceLexer());
}, 'nelmio_alice.fixture_builder.denormalizer.fixture.simple_fixture_bag_denormalizer' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.denormalizer.fixture.simple_fixture_bag_denormalizer'] ?? $this->load('getNelmioAlice_FixtureBuilder_Denormalizer_Fixture_SimpleFixtureBagDenormalizerService.php'));
}, 'nelmio_alice.fixture_builder.denormalizer.fixture.registry_denormalizer' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.denormalizer.fixture.registry_denormalizer'] ?? $this->load('getNelmioAlice_FixtureBuilder_Denormalizer_Fixture_RegistryDenormalizerService.php'));
}, 'nelmio_alice.fixture_builder.denormalizer.fixture.chainable.null_list' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.denormalizer.fixture.chainable.null_list'] ?? $this->privates['nelmio_alice.fixture_builder.denormalizer.fixture.chainable.null_list'] = new \Nelmio\Alice\FixtureBuilder\Denormalizer\Fixture\Chainable\NullListNameDenormalizer());
}, 'nelmio_alice.fixture_builder.denormalizer.fixture.chainable.temporary_list' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.denormalizer.fixture.chainable.temporary_list'] ?? $this->load('getNelmioAlice_FixtureBuilder_Denormalizer_Fixture_Chainable_TemporaryListService.php'));
}, 'nelmio_alice.fixture_builder.denormalizer.fixture.chainable.simple_list' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.denormalizer.fixture.chainable.simple_list'] ?? $this->load('getNelmioAlice_FixtureBuilder_Denormalizer_Fixture_Chainable_SimpleListService.php'));
}, 'nelmio_alice.fixture_builder.denormalizer.fixture.chainable.null_range' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.denormalizer.fixture.chainable.null_range'] ?? $this->privates['nelmio_alice.fixture_builder.denormalizer.fixture.chainable.null_range'] = new \Nelmio\Alice\FixtureBuilder\Denormalizer\Fixture\Chainable\NullRangeNameDenormalizer());
}, 'nelmio_alice.fixture_builder.denormalizer.fixture.chainable.reference_range_name' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.denormalizer.fixture.chainable.reference_range_name'] ?? $this->load('getNelmioAlice_FixtureBuilder_Denormalizer_Fixture_Chainable_ReferenceRangeNameService.php'));
}, 'nelmio_alice.fixture_builder.denormalizer.fixture.chainable.temporary_range' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.denormalizer.fixture.chainable.temporary_range'] ?? $this->load('getNelmioAlice_FixtureBuilder_Denormalizer_Fixture_Chainable_TemporaryRangeService.php'));
}, 'nelmio_alice.fixture_builder.denormalizer.fixture.chainable.simple_range' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.denormalizer.fixture.chainable.simple_range'] ?? $this->load('getNelmioAlice_FixtureBuilder_Denormalizer_Fixture_Chainable_SimpleRangeService.php'));
}, 'nelmio_alice.fixture_builder.denormalizer.fixture.chainable.simple' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.denormalizer.fixture.chainable.simple'] ?? $this->load('getNelmioAlice_FixtureBuilder_Denormalizer_Fixture_Chainable_SimpleService.php'));
}, 'nelmio_alice.fixture_builder.denormalizer.specs.simple' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.denormalizer.specs.simple'] ?? $this->load('getNelmioAlice_FixtureBuilder_Denormalizer_Specs_SimpleService.php'));
}, 'nelmio_alice.fixture_builder.denormalizer.fixture.specs.constructor.legacy_constructor_denormalizer' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.denormalizer.fixture.specs.constructor.legacy_constructor_denormalizer'] ?? $this->load('getNelmioAlice_FixtureBuilder_Denormalizer_Fixture_Specs_Constructor_LegacyConstructorDenormalizerService.php'));
}, 'nelmio_alice.fixture_builder.denormalizer.fixture.specs.constructor.factory_denormalizer' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.denormalizer.fixture.specs.constructor.factory_denormalizer'] ?? $this->load('getNelmioAlice_FixtureBuilder_Denormalizer_Fixture_Specs_Constructor_FactoryDenormalizerService.php'));
}, 'nelmio_alice.fixture_builder.denormalizer.fixture.specs.constructor.constructor_denormalizer' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.denormalizer.fixture.specs.constructor.constructor_denormalizer'] ?? $this->load('getNelmioAlice_FixtureBuilder_Denormalizer_Fixture_Specs_Constructor_ConstructorDenormalizerService.php'));
}, 'nelmio_alice.fixture_builder.denormalizer.fixture.specs.arguments.simple_arguments_denormalizer' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.denormalizer.fixture.specs.arguments.simple_arguments_denormalizer'] ?? $this->load('getNelmioAlice_FixtureBuilder_Denormalizer_Fixture_Specs_Arguments_SimpleArgumentsDenormalizerService.php'));
}, 'nelmio_alice.fixture_builder.denormalizer.fixture.specs.value.unique_value_denormalizer' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.denormalizer.fixture.specs.value.unique_value_denormalizer'] ?? $this->load('getNelmioAlice_FixtureBuilder_Denormalizer_Fixture_Specs_Value_UniqueValueDenormalizerService.php'));
}, 'nelmio_alice.fixture_builder.denormalizer.fixture.specs.value.simple_value_denormalizer' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.denormalizer.fixture.specs.value.simple_value_denormalizer'] ?? $this->load('getNelmioAlice_FixtureBuilder_Denormalizer_Fixture_Specs_Value_SimpleValueDenormalizerService.php'));
}, 'nelmio_alice.fixture_builder.denormalizer.fixture.specs.property.simple_denormalizer' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.denormalizer.fixture.specs.property.simple_denormalizer'] ?? $this->load('getNelmioAlice_FixtureBuilder_Denormalizer_Fixture_Specs_Property_SimpleDenormalizerService.php'));
}, 'nelmio_alice.fixture_builder.denormalizer.fixture.specs.calls.simple_denormalizer' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.denormalizer.fixture.specs.calls.simple_denormalizer'] ?? $this->load('getNelmioAlice_FixtureBuilder_Denormalizer_Fixture_Specs_Calls_SimpleDenormalizerService.php'));
}, 'nelmio_alice.fixture_builder.denormalizer.fixture.specs.calls.function_denormalizer' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.denormalizer.fixture.specs.calls.function_denormalizer'] ?? $this->load('getNelmioAlice_FixtureBuilder_Denormalizer_Fixture_Specs_Calls_FunctionDenormalizerService.php'));
}, 'nelmio_alice.fixture_builder.denormalizer.fixture.specs.calls.method_flag_handler.configurator_flag_handler' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.denormalizer.fixture.specs.calls.method_flag_handler.configurator_flag_handler'] ?? $this->privates['nelmio_alice.fixture_builder.denormalizer.fixture.specs.calls.method_flag_handler.configurator_flag_handler'] = new \Nelmio\Alice\FixtureBuilder\Denormalizer\Fixture\SpecificationBagDenormalizer\Calls\MethodFlagHandler\ConfiguratorFlagHandler());
}, 'nelmio_alice.fixture_builder.denormalizer.fixture.specs.calls.method_flag_handler.optional_flag_handler' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.denormalizer.fixture.specs.calls.method_flag_handler.optional_flag_handler'] ?? $this->privates['nelmio_alice.fixture_builder.denormalizer.fixture.specs.calls.method_flag_handler.optional_flag_handler'] = new \Nelmio\Alice\FixtureBuilder\Denormalizer\Fixture\SpecificationBagDenormalizer\Calls\MethodFlagHandler\OptionalFlagHandler());
}, 'nelmio_alice.fixture_builder.denormalizer.flag_parser.element' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.denormalizer.flag_parser.element'] ?? $this->load('getNelmioAlice_FixtureBuilder_Denormalizer_FlagParser_ElementService.php'));
}, 'nelmio_alice.fixture_builder.denormalizer.flag_parser.registry' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.denormalizer.flag_parser.registry'] ?? $this->load('getNelmioAlice_FixtureBuilder_Denormalizer_FlagParser_RegistryService.php'));
}, 'nelmio_alice.fixture_builder.denormalizer.flag_parser.chainable.configurator' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.denormalizer.flag_parser.chainable.configurator'] ?? $this->privates['nelmio_alice.fixture_builder.denormalizer.flag_parser.chainable.configurator'] = new \Nelmio\Alice\FixtureBuilder\Denormalizer\FlagParser\Chainable\ConfiguratorFlagParser());
}, 'nelmio_alice.fixture_builder.denormalizer.flag_parser.chainable.extend' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.denormalizer.flag_parser.chainable.extend'] ?? $this->privates['nelmio_alice.fixture_builder.denormalizer.flag_parser.chainable.extend'] = new \Nelmio\Alice\FixtureBuilder\Denormalizer\FlagParser\Chainable\ExtendFlagParser());
}, 'nelmio_alice.fixture_builder.denormalizer.flag_parser.chainable.optional' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.denormalizer.flag_parser.chainable.optional'] ?? $this->privates['nelmio_alice.fixture_builder.denormalizer.flag_parser.chainable.optional'] = new \Nelmio\Alice\FixtureBuilder\Denormalizer\FlagParser\Chainable\OptionalFlagParser());
}, 'nelmio_alice.fixture_builder.denormalizer.flag_parser.chainable.template' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.denormalizer.flag_parser.chainable.template'] ?? $this->privates['nelmio_alice.fixture_builder.denormalizer.flag_parser.chainable.template'] = new \Nelmio\Alice\FixtureBuilder\Denormalizer\FlagParser\Chainable\TemplateFlagParser());
}, 'nelmio_alice.fixture_builder.denormalizer.flag_parser.chainable.unique' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.denormalizer.flag_parser.chainable.unique'] ?? $this->privates['nelmio_alice.fixture_builder.denormalizer.flag_parser.chainable.unique'] = new \Nelmio\Alice\FixtureBuilder\Denormalizer\FlagParser\Chainable\UniqueFlagParser());
}, 'nelmio_alice.file_locator.default' => function () {
    return ($this->privates['nelmio_alice.file_locator.default'] ?? $this->privates['nelmio_alice.file_locator.default'] = new \Nelmio\Alice\FileLocator\DefaultFileLocator());
}, 'nelmio_alice.data_loader.simple' => function () {
    return ($this->services['nelmio_alice.data_loader'] ?? $this->load('getNelmioAlice_DataLoaderService.php'));
}, 'nelmio_alice.file_loader.simple' => function () {
    return ($this->services['nelmio_alice.file_loader'] ?? $this->load('getNelmioAlice_FileLoaderService.php'));
}, 'nelmio_alice.files_loader.simple' => function () {
    return ($this->services['nelmio_alice.files_loader'] ?? $this->load('getNelmioAlice_FilesLoaderService.php'));
}, 'nelmio_alice.faker.generator' => function () {
    return ($this->services['Faker\Generator'] ?? $this->load('getGeneratorService.php'));
}, 'nelmio_alice.faker.provider.alice' => function () {
    return ($this->privates['nelmio_alice.faker.provider.alice'] ?? $this->privates['nelmio_alice.faker.provider.alice'] = new \Nelmio\Alice\Faker\Provider\AliceProvider());
}, 'fidry_alice_data_fixtures.loader.simple' => function () {
    return ($this->privates['fidry_alice_data_fixtures.loader.simple'] ?? $this->load('getFidryAliceDataFixtures_Loader_SimpleService.php'));
}, 'fidry_alice_data_fixtures.doctrine.purger_loader' => function () {
    return ($this->services['fidry_alice_data_fixtures.loader.doctrine'] ?? $this->load('getFidryAliceDataFixtures_Loader_DoctrineService.php'));
}, 'fidry_alice_data_fixtures.doctrine.persister_loader' => function () {
    return ($this->privates['fidry_alice_data_fixtures.doctrine.persister_loader'] ?? $this->load('getFidryAliceDataFixtures_Doctrine_PersisterLoaderService.php'));
}, 'fidry_alice_data_fixtures.persistence.doctrine.purger.purger_factory' => function () {
    return ($this->services['fidry_alice_data_fixtures.persistence.purger_factory.doctrine'] ?? $this->load('getFidryAliceDataFixtures_Persistence_PurgerFactory_DoctrineService.php'));
}, 'fidry_alice_data_fixtures.persistence.persister.doctrine.object_manager_persister' => function () {
    return ($this->services['fidry_alice_data_fixtures.persistence.persister.doctrine'] ?? $this->load('getFidryAliceDataFixtures_Persistence_Persister_DoctrineService.php'));
}, 'hautelook_alice.alice.generator.instantiator.chainable.instantiated_reference_instantiator' => function () {
    return ($this->privates['hautelook_alice.alice.generator.instantiator.chainable.instantiated_reference_instantiator'] ?? $this->load('getHautelookAlice_Alice_Generator_Instantiator_Chainable_InstantiatedReferenceInstantiatorService.php'));
}, 'hautelook_alice.alice.file_locator.kernel' => function () {
    return ($this->privates['hautelook_alice.alice.file_locator.kernel'] ?? $this->load('getHautelookAlice_Alice_FileLocator_KernelService.php'));
}, 'hautelook_alice.resolver.bundle.simple_resolver' => function () {
    return ($this->privates['hautelook_alice.resolver.bundle.simple_resolver'] ?? $this->privates['hautelook_alice.resolver.bundle.simple_resolver'] = new \Hautelook\AliceBundle\Resolver\Bundle\SimpleBundleResolver(($this->services['kernel'] ?? $this->get('kernel', 1))));
}, 'hautelook_alice.resolver.bundle.no_bundle_resolver' => function () {
    return ($this->services['hautelook_alice.resolver.bundle'] ?? $this->load('getHautelookAlice_Resolver_BundleService.php'));
}, 'hautelook_alice.resolver.file.kernel_file_resolver' => function () {
    return ($this->services['hautelook_alice.resolver.file'] ?? $this->services['hautelook_alice.resolver.file'] = new \Hautelook\AliceBundle\Resolver\File\KernelFileResolver(($this->services['kernel'] ?? $this->get('kernel', 1))));
}, 'hautelook_alice.loader.doctrine_orm_loader' => function () {
    return ($this->services['hautelook_alice.loader'] ?? $this->load('getHautelookAlice_LoaderService.php'));
}, 'hautelook_alice.locator.env_directory' => function () {
    return ($this->privates['hautelook_alice.locator.env_directory'] ?? $this->load('getHautelookAlice_Locator_EnvDirectoryService.php'));
}, 'hautelook_alice.locator.environmentless' => function () {
    return ($this->services['hautelook_alice.locator'] ?? $this->load('getHautelookAlice_LocatorService.php'));
}, 'nelmio_api_doc.controller_reflector' => function () {
    return ($this->privates['nelmio_api_doc.controller_reflector'] ?? $this->load('getNelmioApiDoc_ControllerReflectorService.php'));
}, 'nelmio_api_doc.describers.config' => function () {
    return ($this->privates['nelmio_api_doc.describers.config'] ?? $this->load('getNelmioApiDoc_Describers_ConfigService.php'));
}, 'nelmio_api_doc.describers.default' => function () {
    return ($this->privates['nelmio_api_doc.describers.default'] ?? $this->privates['nelmio_api_doc.describers.default'] = new \Nelmio\ApiDocBundle\Describer\DefaultDescriber());
}, 'nelmio_api_doc.route_describers.route_metadata' => function () {
    return ($this->privates['nelmio_api_doc.route_describers.route_metadata'] ?? $this->privates['nelmio_api_doc.route_describers.route_metadata'] = new \Nelmio\ApiDocBundle\RouteDescriber\RouteMetadataDescriber());
}, 'nelmio_api_doc.model_describers.object' => function () {
    return ($this->privates['nelmio_api_doc.model_describers.object'] ?? $this->load('getNelmioApiDoc_ModelDescribers_ObjectService.php'));
}, 'nelmio_api_doc.generator.default' => function () {
    return ($this->services['nelmio_api_doc.generator'] ?? $this->load('getNelmioApiDoc_GeneratorService.php'));
}, 'nelmio_api_doc.routes.default' => function () {
    return ($this->privates['nelmio_api_doc.routes.default'] ?? $this->load('getNelmioApiDoc_Routes_DefaultService.php'));
}, 'nelmio_api_doc.describers.route.default' => function () {
    return ($this->privates['nelmio_api_doc.describers.route.default'] ?? $this->load('getNelmioApiDoc_Describers_Route_DefaultService.php'));
}, 'nelmio_api_doc.describers.swagger_php.default' => function () {
    return ($this->privates['nelmio_api_doc.describers.swagger_php.default'] ?? $this->load('getNelmioApiDoc_Describers_SwaggerPhp_DefaultService.php'));
}, 'nelmio_api_doc.generator_locator' => function () {
    return ($this->privates['nelmio_api_doc.generator_locator'] ?? $this->load('getNelmioApiDoc_GeneratorLocatorService.php'));
}, 'nelmio_api_doc.route_describers.php_doc' => function () {
    return ($this->privates['nelmio_api_doc.route_describers.php_doc'] ?? $this->privates['nelmio_api_doc.route_describers.php_doc'] = new \Nelmio\ApiDocBundle\RouteDescriber\PhpDocDescriber());
}, 'nelmio_api_doc.route_describers.fos_rest' => function () {
    return ($this->privates['nelmio_api_doc.route_describers.fos_rest'] ?? $this->load('getNelmioApiDoc_RouteDescribers_FosRestService.php'));
}, 'debug.argument_resolver.request_attribute' => function () {
    return ($this->privates['debug.argument_resolver.request_attribute'] ?? $this->load('getDebug_ArgumentResolver_RequestAttributeService.php'));
}, 'debug.argument_resolver.request' => function () {
    return ($this->privates['debug.argument_resolver.request'] ?? $this->load('getDebug_ArgumentResolver_RequestService.php'));
}, 'debug.argument_resolver.session' => function () {
    return ($this->privates['debug.argument_resolver.session'] ?? $this->load('getDebug_ArgumentResolver_SessionService.php'));
}, 'debug.security.user_value_resolver' => function () {
    return ($this->privates['debug.security.user_value_resolver'] ?? $this->load('getDebug_Security_UserValueResolverService.php'));
}, 'debug.argument_resolver.service' => function () {
    return ($this->privates['debug.argument_resolver.service'] ?? $this->load('getDebug_ArgumentResolver_ServiceService.php'));
}, 'debug.argument_resolver.default' => function () {
    return ($this->privates['debug.argument_resolver.default'] ?? $this->load('getDebug_ArgumentResolver_DefaultService.php'));
}, 'debug.argument_resolver.variadic' => function () {
    return ($this->privates['debug.argument_resolver.variadic'] ?? $this->load('getDebug_ArgumentResolver_VariadicService.php'));
}, 'security.logout.handler.csrf_token_clearing' => function () {
    return ($this->privates['security.logout.handler.csrf_token_clearing'] ?? $this->load('getSecurity_Logout_Handler_CsrfTokenClearingService.php'));
}, 'monolog.logger.request' => function () {
    return ($this->privates['monolog.logger.request'] ?? $this->getMonolog_Logger_RequestService());
}, 'monolog.logger.console' => function () {
    return ($this->privates['monolog.logger.console'] ?? $this->load('getMonolog_Logger_ConsoleService.php'));
}, 'monolog.logger.cache' => function () {
    return ($this->privates['monolog.logger.cache'] ?? $this->getMonolog_Logger_CacheService());
}, 'monolog.logger.profiler' => function () {
    return ($this->privates['monolog.logger.profiler'] ?? $this->getMonolog_Logger_ProfilerService());
}, 'monolog.logger.php' => function () {
    return ($this->privates['monolog.logger.php'] ?? $this->getMonolog_Logger_PhpService());
}, 'monolog.logger.event' => function () {
    return ($this->privates['monolog.logger.event'] ?? $this->getMonolog_Logger_EventService());
}, 'monolog.logger.router' => function () {
    return ($this->privates['monolog.logger.router'] ?? $this->getMonolog_Logger_RouterService());
}, 'monolog.logger.doctrine' => function () {
    return ($this->privates['monolog.logger.doctrine'] ?? $this->load('getMonolog_Logger_DoctrineService.php'));
}, 'monolog.logger.security' => function () {
    return ($this->privates['monolog.logger.security'] ?? $this->load('getMonolog_Logger_SecurityService.php'));
}, 'monolog.handler.null_internal' => function () {
    return ($this->privates['monolog.handler.null_internal'] ?? $this->privates['monolog.handler.null_internal'] = new \Monolog\Handler\NullHandler());
}, 'debug.validator.inner' => function () {
    return ($this->privates['debug.validator.inner'] ?? $this->getDebug_Validator_InnerService());
}, 'debug.event_dispatcher.inner' => function () {
    return ($this->privates['debug.event_dispatcher.inner'] ?? $this->privates['debug.event_dispatcher.inner'] = new \Symfony\Component\EventDispatcher\EventDispatcher());
}, 'debug.controller_resolver.inner' => function () {
    return ($this->privates['debug.controller_resolver.inner'] ?? $this->getDebug_ControllerResolver_InnerService());
}, 'debug.argument_resolver.inner' => function () {
    return ($this->privates['debug.argument_resolver.inner'] ?? $this->getDebug_ArgumentResolver_InnerService());
}, 'debug.security.access.decision_manager.inner' => function () {
    return ($this->privates['debug.security.access.decision_manager.inner'] ?? $this->getDebug_Security_Access_DecisionManager_InnerService());
}, 'debug.argument_resolver.request_attribute.inner' => function () {
    return ($this->privates['debug.argument_resolver.request_attribute.inner'] ?? $this->privates['debug.argument_resolver.request_attribute.inner'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestAttributeValueResolver());
}, 'debug.argument_resolver.request.inner' => function () {
    return ($this->privates['debug.argument_resolver.request.inner'] ?? $this->privates['debug.argument_resolver.request.inner'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestValueResolver());
}, 'debug.argument_resolver.session.inner' => function () {
    return ($this->privates['debug.argument_resolver.session.inner'] ?? $this->privates['debug.argument_resolver.session.inner'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\SessionValueResolver());
}, 'debug.security.user_value_resolver.inner' => function () {
    return ($this->privates['debug.security.user_value_resolver.inner'] ?? $this->load('getDebug_Security_UserValueResolver_InnerService.php'));
}, 'debug.argument_resolver.service.inner' => function () {
    return ($this->privates['debug.argument_resolver.service.inner'] ?? $this->load('getDebug_ArgumentResolver_Service_InnerService.php'));
}, 'debug.argument_resolver.default.inner' => function () {
    return ($this->privates['debug.argument_resolver.default.inner'] ?? $this->privates['debug.argument_resolver.default.inner'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\DefaultValueResolver());
}, 'debug.argument_resolver.variadic.inner' => function () {
    return ($this->privates['debug.argument_resolver.variadic.inner'] ?? $this->privates['debug.argument_resolver.variadic.inner'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\VariadicValueResolver());
}, 'cache.app.recorder_inner' => function () {
    return ($this->privates['cache.app.recorder_inner'] ?? $this->getCache_App_RecorderInnerService());
}, 'cache.system.recorder_inner' => function () {
    return ($this->privates['cache.system.recorder_inner'] ?? $this->getCache_System_RecorderInnerService());
}, 'cache.validator.recorder_inner' => function () {
    return ($this->privates['cache.validator.recorder_inner'] ?? $this->getCache_Validator_RecorderInnerService());
}, 'cache.serializer.recorder_inner' => function () {
    return ($this->privates['cache.serializer.recorder_inner'] ?? $this->getCache_Serializer_RecorderInnerService());
}, 'cache.annotations.recorder_inner' => function () {
    return ($this->privates['cache.annotations.recorder_inner'] ?? $this->getCache_Annotations_RecorderInnerService());
}, 'cache.security_expression_language.recorder_inner' => function () {
    return ($this->privates['cache.security_expression_language.recorder_inner'] ?? $this->getCache_SecurityExpressionLanguage_RecorderInnerService());
}, 'Psr\\Container\\ContainerInterface' => function () {
    return $this;
}, 'Symfony\\Component\\DependencyInjection\\ContainerInterface' => function () {
    return $this;
}, 'Symfony\\Component\\DependencyInjection\\ParameterBag\\ContainerBagInterface' => function () {
    return ($this->privates['parameter_bag'] ?? $this->privates['parameter_bag'] = new \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag($this));
}, 'Symfony\\Component\\DependencyInjection\\ParameterBag\\ParameterBagInterface' => function () {
    return ($this->privates['parameter_bag'] ?? $this->privates['parameter_bag'] = new \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag($this));
}, 'Symfony\\Component\\EventDispatcher\\EventDispatcherInterface' => function () {
    return ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());
}, 'Symfony\\Component\\HttpKernel\\HttpKernelInterface' => function () {
    return ($this->services['http_kernel'] ?? $this->getHttpKernelService());
}, 'Symfony\\Component\\HttpFoundation\\RequestStack' => function () {
    return ($this->services['request_stack'] ?? $this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack());
}, 'Symfony\\Component\\HttpKernel\\KernelInterface' => function () {
    return ($this->services['kernel'] ?? $this->get('kernel', 1));
}, 'Symfony\\Component\\Filesystem\\Filesystem' => function () {
    return ($this->services['filesystem'] ?? $this->services['filesystem'] = new \Symfony\Component\Filesystem\Filesystem());
}, 'Symfony\\Component\\HttpKernel\\Config\\FileLocator' => function () {
    return ($this->privates['file_locator'] ?? $this->privates['file_locator'] = new \Symfony\Component\HttpKernel\Config\FileLocator(($this->services['kernel'] ?? $this->get('kernel', 1)), '/app/src/Resources', array(0 => '/app/src')));
}, 'Psr\\Cache\\CacheItemPoolInterface' => function () {
    return ($this->services['cache.app'] ?? $this->getCache_AppService());
}, 'Symfony\\Component\\Cache\\Adapter\\AdapterInterface' => function () {
    return ($this->services['cache.app'] ?? $this->getCache_AppService());
}, 'Symfony\\Component\\Translation\\TranslatorInterface' => function () {
    return ($this->services['translator'] ?? $this->getTranslatorService());
}, 'Symfony\\Component\\HttpFoundation\\Session\\SessionInterface' => function () {
    return ($this->services['session'] ?? $this->load('getSessionService.php'));
}, 'Symfony\\Component\\HttpFoundation\\Session\\Storage\\SessionStorageInterface' => function () {
    return ($this->privates['session.storage.mock_file'] ?? $this->load('getSession_Storage_MockFileService.php'));
}, 'Symfony\\Component\\HttpFoundation\\Session\\Flash\\FlashBagInterface' => function () {
    return ($this->privates['session.flash_bag'] ?? $this->privates['session.flash_bag'] = new \Symfony\Component\HttpFoundation\Session\Flash\FlashBag());
}, 'session.storage.filesystem' => function () {
    return ($this->privates['session.storage.mock_file'] ?? $this->load('getSession_Storage_MockFileService.php'));
}, 'session.storage' => function () {
    return ($this->privates['session.storage.mock_file'] ?? $this->load('getSession_Storage_MockFileService.php'));
}, 'Symfony\\Component\\Security\\Csrf\\TokenGenerator\\TokenGeneratorInterface' => function () {
    return ($this->privates['security.csrf.token_generator'] ?? $this->privates['security.csrf.token_generator'] = new \Symfony\Component\Security\Csrf\TokenGenerator\UriSafeTokenGenerator());
}, 'Symfony\\Component\\Security\\Csrf\\TokenStorage\\TokenStorageInterface' => function () {
    return ($this->privates['security.csrf.token_storage'] ?? $this->load('getSecurity_Csrf_TokenStorageService.php'));
}, 'Symfony\\Component\\Security\\Csrf\\CsrfTokenManagerInterface' => function () {
    return ($this->services['security.csrf.token_manager'] ?? $this->load('getSecurity_Csrf_TokenManagerService.php'));
}, 'Symfony\\Component\\Asset\\Packages' => function () {
    return ($this->privates['assets.packages'] ?? $this->getAssets_PackagesService());
}, 'Symfony\\Component\\Validator\\Validator\\ValidatorInterface' => function () {
    return ($this->services['validator'] ?? $this->getValidatorService());
}, 'validator.mapping.class_metadata_factory' => function () {
    return ($this->services['validator'] ?? $this->getValidatorService());
}, 'Symfony\\Component\\Translation\\Reader\\TranslationReaderInterface' => function () {
    return ($this->privates['translation.reader'] ?? $this->load('getTranslation_ReaderService.php'));
}, 'Symfony\\Component\\Translation\\Extractor\\ExtractorInterface' => function () {
    return ($this->privates['translation.extractor'] ?? $this->load('getTranslation_ExtractorService.php'));
}, 'Symfony\\Component\\Translation\\Writer\\TranslationWriterInterface' => function () {
    return ($this->privates['translation.writer'] ?? $this->load('getTranslation_WriterService.php'));
}, 'translator.formatter' => function () {
    return ($this->privates['translator.formatter.default'] ?? $this->getTranslator_Formatter_DefaultService());
}, 'Symfony\\Component\\HttpKernel\\Debug\\FileLinkFormatter' => function () {
    return ($this->privates['debug.file_link_formatter'] ?? $this->getDebug_FileLinkFormatterService());
}, 'Symfony\\Component\\Stopwatch\\Stopwatch' => function () {
    return ($this->privates['debug.stopwatch'] ?? $this->privates['debug.stopwatch'] = new \Symfony\Component\Stopwatch\Stopwatch(true));
}, 'Symfony\\Component\\Routing\\RouterInterface' => function () {
    return ($this->services['router'] ?? $this->getRouterService());
}, 'Symfony\\Component\\Routing\\Generator\\UrlGeneratorInterface' => function () {
    return ($this->services['router'] ?? $this->getRouterService());
}, 'Symfony\\Component\\Routing\\Matcher\\UrlMatcherInterface' => function () {
    return ($this->services['router'] ?? $this->getRouterService());
}, 'Symfony\\Component\\Routing\\RequestContextAwareInterface' => function () {
    return ($this->services['router'] ?? $this->getRouterService());
}, 'Symfony\\Component\\Routing\\RequestContext' => function () {
    return ($this->privates['router.request_context'] ?? $this->getRouter_RequestContextService());
}, 'annotation_reader' => function () {
    return ($this->privates['annotations.cached_reader'] ?? $this->getAnnotations_CachedReaderService());
}, 'Doctrine\\Common\\Annotations\\Reader' => function () {
    return ($this->privates['annotations.cached_reader'] ?? $this->getAnnotations_CachedReaderService());
}, 'Symfony\\Component\\PropertyAccess\\PropertyAccessorInterface' => function () {
    return ($this->privates['property_accessor'] ?? $this->getPropertyAccessorService());
}, 'Symfony\\Component\\Serializer\\SerializerInterface' => function () {
    return ($this->services['serializer'] ?? $this->getSerializerService());
}, 'Symfony\\Component\\Serializer\\Normalizer\\NormalizerInterface' => function () {
    return ($this->services['serializer'] ?? $this->getSerializerService());
}, 'Symfony\\Component\\Serializer\\Normalizer\\DenormalizerInterface' => function () {
    return ($this->services['serializer'] ?? $this->getSerializerService());
}, 'Symfony\\Component\\Serializer\\Encoder\\EncoderInterface' => function () {
    return ($this->services['serializer'] ?? $this->getSerializerService());
}, 'Symfony\\Component\\Serializer\\Encoder\\DecoderInterface' => function () {
    return ($this->services['serializer'] ?? $this->getSerializerService());
}, 'serializer.property_accessor' => function () {
    return ($this->privates['property_accessor'] ?? $this->getPropertyAccessorService());
}, 'Symfony\\Component\\Serializer\\Mapping\\ClassDiscriminatorResolverInterface' => function () {
    return ($this->privates['serializer.mapping.class_discriminator_resolver'] ?? $this->getSerializer_Mapping_ClassDiscriminatorResolverService());
}, 'Symfony\\Component\\Serializer\\Normalizer\\ObjectNormalizer' => function () {
    return ($this->privates['serializer.normalizer.object'] ?? $this->getSerializer_Normalizer_ObjectService());
}, 'Symfony\\Component\\Serializer\\Mapping\\Factory\\ClassMetadataFactoryInterface' => function () {
    return ($this->privates['serializer.mapping.class_metadata_factory'] ?? $this->getSerializer_Mapping_ClassMetadataFactoryService());
}, 'Symfony\\Component\\PropertyInfo\\PropertyInfoExtractorInterface' => function () {
    return ($this->privates['property_info'] ?? $this->getPropertyInfoService());
}, 'Doctrine\\DBAL\\Driver\\Connection' => function () {
    return ($this->services['doctrine.dbal.default_connection'] ?? $this->load('getDoctrine_Dbal_DefaultConnectionService.php'));
}, 'Doctrine\\DBAL\\Connection' => function () {
    return ($this->services['doctrine.dbal.default_connection'] ?? $this->load('getDoctrine_Dbal_DefaultConnectionService.php'));
}, 'Doctrine\\Common\\Persistence\\ManagerRegistry' => function () {
    return ($this->services['doctrine'] ?? $this->getDoctrineService());
}, 'Symfony\\Bridge\\Doctrine\\RegistryInterface' => function () {
    return ($this->services['doctrine'] ?? $this->getDoctrineService());
}, 'doctrine.dbal.event_manager' => function () {
    return ($this->privates['doctrine.dbal.default_connection.event_manager'] ?? $this->load('getDoctrine_Dbal_DefaultConnection_EventManagerService.php'));
}, 'Doctrine\\Common\\Persistence\\ObjectManager' => function () {
    return ($this->services['doctrine.orm.default_entity_manager'] ?? $this->load('getDoctrine_Orm_DefaultEntityManagerService.php'));
}, 'Doctrine\\ORM\\EntityManagerInterface' => function () {
    return ($this->services['doctrine.orm.default_entity_manager'] ?? $this->load('getDoctrine_Orm_DefaultEntityManagerService.php'));
}, 'doctrine.orm.metadata.annotation_reader' => function () {
    return ($this->privates['annotations.cached_reader'] ?? $this->getAnnotations_CachedReaderService());
}, 'doctrine.orm.default_entity_manager.event_manager' => function () {
    return ($this->privates['doctrine.dbal.default_connection.event_manager'] ?? $this->load('getDoctrine_Dbal_DefaultConnection_EventManagerService.php'));
}, 'Symfony\\Component\\Security\\Core\\Authorization\\AuthorizationCheckerInterface' => function () {
    return ($this->services['security.authorization_checker'] ?? $this->getSecurity_AuthorizationCheckerService());
}, 'Symfony\\Component\\Security\\Core\\Authentication\\Token\\Storage\\TokenStorageInterface' => function () {
    return ($this->services['security.token_storage'] ?? $this->services['security.token_storage'] = new \Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage());
}, 'Symfony\\Component\\Security\\Core\\Authentication\\AuthenticationManagerInterface' => function () {
    return ($this->privates['security.authentication.manager'] ?? $this->getSecurity_Authentication_ManagerService());
}, 'Symfony\\Component\\Security\\Http\\Session\\SessionAuthenticationStrategyInterface' => function () {
    return ($this->privates['security.authentication.session_strategy'] ?? $this->privates['security.authentication.session_strategy'] = new \Symfony\Component\Security\Http\Session\SessionAuthenticationStrategy('migrate'));
}, 'security.encoder_factory' => function () {
    return ($this->privates['security.encoder_factory.generic'] ?? $this->privates['security.encoder_factory.generic'] = new \Symfony\Component\Security\Core\Encoder\EncoderFactory(array()));
}, 'Symfony\\Component\\Security\\Core\\Encoder\\EncoderFactoryInterface' => function () {
    return ($this->privates['security.encoder_factory.generic'] ?? $this->privates['security.encoder_factory.generic'] = new \Symfony\Component\Security\Core\Encoder\EncoderFactory(array()));
}, 'Symfony\\Component\\Security\\Core\\Encoder\\UserPasswordEncoderInterface' => function () {
    return ($this->services['security.password_encoder'] ?? $this->load('getSecurity_PasswordEncoderService.php'));
}, 'Symfony\\Component\\Security\\Http\\Authentication\\AuthenticationUtils' => function () {
    return ($this->services['security.authentication_utils'] ?? $this->load('getSecurity_AuthenticationUtilsService.php'));
}, 'Symfony\\Component\\Security\\Core\\Authorization\\AccessDecisionManagerInterface' => function () {
    return ($this->privates['debug.security.access.decision_manager'] ?? $this->getDebug_Security_Access_DecisionManagerService());
}, 'Symfony\\Component\\Security\\Core\\Role\\RoleHierarchyInterface' => function () {
    return ($this->privates['security.role_hierarchy'] ?? $this->privates['security.role_hierarchy'] = new \Symfony\Component\Security\Core\Role\RoleHierarchy(array()));
}, 'Symfony\\Component\\Security\\Http\\Firewall' => function () {
    return ($this->privates['debug.security.firewall'] ?? $this->getDebug_Security_FirewallService());
}, 'Symfony\\Component\\Security\\Http\\HttpUtils' => function () {
    return ($this->privates['security.http_utils'] ?? $this->load('getSecurity_HttpUtilsService.php'));
}, 'Symfony\\Component\\Security\\Guard\\GuardAuthenticatorHandler' => function () {
    return ($this->privates['security.authentication.guard_handler'] ?? $this->load('getSecurity_Authentication_GuardHandlerService.php'));
}, 'security.firewall' => function () {
    return ($this->privates['debug.security.firewall'] ?? $this->getDebug_Security_FirewallService());
}, 'Symfony\\Component\\Security\\Core\\User\\UserProviderInterface' => function () {
    return ($this->privates['security.user.provider.concrete.your_db_provider'] ?? $this->load('getSecurity_User_Provider_Concrete_YourDbProviderService.php'));
}, 'security.user_checker.main' => function () {
    return ($this->privates['security.user_checker'] ?? $this->privates['security.user_checker'] = new \Symfony\Component\Security\Core\User\UserChecker());
}, 'Symfony\\Component\\Security\\Core\\User\\UserCheckerInterface' => function () {
    return ($this->privates['security.user_checker'] ?? $this->privates['security.user_checker'] = new \Symfony\Component\Security\Core\User\UserChecker());
}, 'logger' => function () {
    return ($this->privates['monolog.logger'] ?? $this->getMonolog_LoggerService());
}, 'Psr\\Log\\LoggerInterface' => function () {
    return ($this->privates['monolog.logger'] ?? $this->getMonolog_LoggerService());
}, 'FOS\\RestBundle\\View\\ViewHandlerInterface' => function () {
    return ($this->services['fos_rest.view_handler'] ?? $this->load('getFosRest_ViewHandlerService.php'));
}, 'FOS\\RestBundle\\Request\\ParamFetcherInterface' => function () {
    return ($this->privates['fos_rest.request.param_fetcher'] ?? $this->getFosRest_Request_ParamFetcherService());
}, 'fos_rest.router' => function () {
    return ($this->services['router'] ?? $this->getRouterService());
}, 'fos_rest.inflector' => function () {
    return ($this->privates['fos_rest.inflector.doctrine'] ?? $this->privates['fos_rest.inflector.doctrine'] = new \FOS\RestBundle\Inflector\DoctrineInflector());
}, 'fos_rest.validator' => function () {
    return ($this->services['validator'] ?? $this->getValidatorService());
}, 'Twig_Environment' => function () {
    return ($this->services['twig'] ?? $this->getTwigService());
}, 'Twig\\Environment' => function () {
    return ($this->services['twig'] ?? $this->getTwigService());
}, 'nelmio_alice.file_parser' => function () {
    return ($this->privates['nelmio_alice.file_parser.runtime_cache'] ?? $this->load('getNelmioAlice_FileParser_RuntimeCacheService.php'));
}, 'nelmio_alice.property_accessor' => function () {
    return ($this->privates['nelmio_alice.property_accessor.std'] ?? $this->load('getNelmioAlice_PropertyAccessor_StdService.php'));
}, 'nelmio_alice.generator' => function () {
    return ($this->privates['nelmio_alice.generator.double_pass'] ?? $this->load('getNelmioAlice_Generator_DoublePassService.php'));
}, 'nelmio_alice.generator.object_generator' => function () {
    return ($this->privates['nelmio_alice.generator.object_generator.complete'] ?? $this->load('getNelmioAlice_Generator_ObjectGenerator_CompleteService.php'));
}, 'nelmio_alice.generator.caller' => function () {
    return ($this->privates['nelmio_alice.generator.caller.simple'] ?? $this->load('getNelmioAlice_Generator_Caller_SimpleService.php'));
}, 'nelmio_alice.generator.hydrator' => function () {
    return ($this->privates['nelmio_alice.generator.hydrator.simple'] ?? $this->load('getNelmioAlice_Generator_Hydrator_SimpleService.php'));
}, 'nelmio_alice.generator.hydrator.property' => function () {
    return ($this->privates['nelmio_alice.generator.hydrator.property.symfony_property_access'] ?? $this->load('getNelmioAlice_Generator_Hydrator_Property_SymfonyPropertyAccessService.php'));
}, 'nelmio_alice.generator.resolver.fixture_bag' => function () {
    return ($this->privates['nelmio_alice.generator.resolver.fixture_bag.template_bag'] ?? $this->privates['nelmio_alice.generator.resolver.fixture_bag.template_bag'] = new \Nelmio\Alice\Generator\Resolver\Fixture\TemplateFixtureBagResolver());
}, 'nelmio_alice.generator.resolver.fixture_set' => function () {
    return ($this->privates['nelmio_alice.generator.resolver.fixture_set.remove_conflicting_objects'] ?? $this->load('getNelmioAlice_Generator_Resolver_FixtureSet_RemoveConflictingObjectsService.php'));
}, 'nelmio_alice.generator.resolver.value' => function () {
    return ($this->privates['nelmio_alice.generator.resolver.value.registry'] ?? $this->load('getNelmioAlice_Generator_Resolver_Value_RegistryService.php'));
}, 'nelmio_alice.generator.resolver.value.property_accessor' => function () {
    return ($this->privates['property_accessor'] ?? $this->getPropertyAccessorService());
}, 'nelmio_alice.generator.resolver.parameter_bag' => function () {
    return ($this->privates['nelmio_alice.generator.resolver.parameter_bag.remove_conflicting_parameters'] ?? $this->load('getNelmioAlice_Generator_Resolver_ParameterBag_RemoveConflictingParametersService.php'));
}, 'nelmio_alice.generator.instantiator' => function () {
    return ($this->privates['nelmio_alice.generator.instantiator.existing_instance'] ?? $this->load('getNelmioAlice_Generator_Instantiator_ExistingInstanceService.php'));
}, 'nelmio_alice.fixture_builder' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.simple'] ?? $this->load('getNelmioAlice_FixtureBuilder_SimpleService.php'));
}, 'nelmio_alice.fixture_builder.denormalizer' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.denormalizer.simple'] ?? $this->load('getNelmioAlice_FixtureBuilder_Denormalizer_SimpleService.php'));
}, 'nelmio_alice.fixture_builder.denormalizer.parameter_bag' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.denormalizer.parameter.simple_parameter_bag_denormalizer'] ?? $this->privates['nelmio_alice.fixture_builder.denormalizer.parameter.simple_parameter_bag_denormalizer'] = new \Nelmio\Alice\FixtureBuilder\Denormalizer\Parameter\SimpleParameterBagDenormalizer());
}, 'nelmio_alice.fixture_builder.expression_language.parser' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.expression_language.parser.function_fixture_reference_parser'] ?? $this->load('getNelmioAlice_FixtureBuilder_ExpressionLanguage_Parser_FunctionFixtureReferenceParserService.php'));
}, 'nelmio_alice.fixture_builder.expression_language.parser.token_parser' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.expression_language.parser.token_parser.registry'] ?? $this->load('getNelmioAlice_FixtureBuilder_ExpressionLanguage_Parser_TokenParser_RegistryService.php'));
}, 'nelmio_alice.fixture_builder.expression_language.lexer' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.expression_language.lexer.empty_value_lexer'] ?? $this->load('getNelmioAlice_FixtureBuilder_ExpressionLanguage_Lexer_EmptyValueLexerService.php'));
}, 'nelmio_alice.fixture_builder.denormalizer.fixture_bag' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.denormalizer.fixture.simple_fixture_bag_denormalizer'] ?? $this->load('getNelmioAlice_FixtureBuilder_Denormalizer_Fixture_SimpleFixtureBagDenormalizerService.php'));
}, 'nelmio_alice.fixture_builder.denormalizer.fixture' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.denormalizer.fixture.registry_denormalizer'] ?? $this->load('getNelmioAlice_FixtureBuilder_Denormalizer_Fixture_RegistryDenormalizerService.php'));
}, 'nelmio_alice.fixture_builder.denormalizer.specs' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.denormalizer.specs.simple'] ?? $this->load('getNelmioAlice_FixtureBuilder_Denormalizer_Specs_SimpleService.php'));
}, 'nelmio_alice.fixture_builder.denormalizer.fixture.specs.constructor' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.denormalizer.fixture.specs.constructor.legacy_constructor_denormalizer'] ?? $this->load('getNelmioAlice_FixtureBuilder_Denormalizer_Fixture_Specs_Constructor_LegacyConstructorDenormalizerService.php'));
}, 'nelmio_alice.fixture_builder.denormalizer.fixture.specs.arguments' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.denormalizer.fixture.specs.arguments.simple_arguments_denormalizer'] ?? $this->load('getNelmioAlice_FixtureBuilder_Denormalizer_Fixture_Specs_Arguments_SimpleArgumentsDenormalizerService.php'));
}, 'nelmio_alice.fixture_builder.denormalizer.fixture.specs.value' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.denormalizer.fixture.specs.value.unique_value_denormalizer'] ?? $this->load('getNelmioAlice_FixtureBuilder_Denormalizer_Fixture_Specs_Value_UniqueValueDenormalizerService.php'));
}, 'nelmio_alice.fixture_builder.denormalizer.fixture.specs.property' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.denormalizer.fixture.specs.property.simple_denormalizer'] ?? $this->load('getNelmioAlice_FixtureBuilder_Denormalizer_Fixture_Specs_Property_SimpleDenormalizerService.php'));
}, 'nelmio_alice.fixture_builder.denormalizer.fixture.specs.calls' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.denormalizer.fixture.specs.calls.simple_denormalizer'] ?? $this->load('getNelmioAlice_FixtureBuilder_Denormalizer_Fixture_Specs_Calls_SimpleDenormalizerService.php'));
}, 'nelmio_alice.fixture_builder.denormalizer.flag_parser' => function () {
    return ($this->privates['nelmio_alice.fixture_builder.denormalizer.flag_parser.element'] ?? $this->load('getNelmioAlice_FixtureBuilder_Denormalizer_FlagParser_ElementService.php'));
}, 'nelmio_alice.file_locator' => function () {
    return ($this->privates['hautelook_alice.alice.file_locator.kernel'] ?? $this->load('getHautelookAlice_Alice_FileLocator_KernelService.php'));
}, 'fidry_alice_data_fixtures.doctrine.loader' => function () {
    return ($this->services['fidry_alice_data_fixtures.loader.doctrine'] ?? $this->load('getFidryAliceDataFixtures_Loader_DoctrineService.php'));
}, 'fidry_alice_data_fixtures.persistence.purger.doctrine.orm_purger' => function () {
    return ($this->services['fidry_alice_data_fixtures.persistence.purger_factory.doctrine'] ?? $this->load('getFidryAliceDataFixtures_Persistence_PurgerFactory_DoctrineService.php'));
}, 'argument_resolver.controller_locator' => function () {
    return ($this->privates['.service_locator.V5c5vyN'] ?? $this->load('get_ServiceLocator_V5c5vyNService.php'));
}, 'fos_rest.serializer' => function () {
    return ($this->privates['fos_rest.serializer.symfony'] ?? $this->getFosRest_Serializer_SymfonyService());
}, 'twig.loader.filesystem' => function () {
    return ($this->privates['twig.loader.native_filesystem'] ?? $this->getTwig_Loader_NativeFilesystemService());
}, 'twig.loader' => function () {
    return ($this->privates['twig.loader.native_filesystem'] ?? $this->getTwig_Loader_NativeFilesystemService());
}, 'translator.data_collector.inner' => function () {
    return ($this->privates['translator.default'] ?? $this->getTranslator_DefaultService());
}, 'controller_resolver' => function () {
    return ($this->privates['debug.controller_resolver'] ?? $this->getDebug_ControllerResolverService());
}, 'argument_resolver' => function () {
    return ($this->privates['debug.argument_resolver'] ?? $this->getDebug_ArgumentResolverService());
}, 'security.access.decision_manager' => function () {
    return ($this->privates['debug.security.access.decision_manager'] ?? $this->getDebug_Security_Access_DecisionManagerService());
}, 'argument_resolver.request_attribute' => function () {
    return ($this->privates['debug.argument_resolver.request_attribute'] ?? $this->load('getDebug_ArgumentResolver_RequestAttributeService.php'));
}, 'argument_resolver.request' => function () {
    return ($this->privates['debug.argument_resolver.request'] ?? $this->load('getDebug_ArgumentResolver_RequestService.php'));
}, 'argument_resolver.session' => function () {
    return ($this->privates['debug.argument_resolver.session'] ?? $this->load('getDebug_ArgumentResolver_SessionService.php'));
}, 'security.user_value_resolver' => function () {
    return ($this->privates['debug.security.user_value_resolver'] ?? $this->load('getDebug_Security_UserValueResolverService.php'));
}, 'argument_resolver.service' => function () {
    return ($this->privates['debug.argument_resolver.service'] ?? $this->load('getDebug_ArgumentResolver_ServiceService.php'));
}, 'argument_resolver.default' => function () {
    return ($this->privates['debug.argument_resolver.default'] ?? $this->load('getDebug_ArgumentResolver_DefaultService.php'));
}, 'argument_resolver.variadic' => function () {
    return ($this->privates['debug.argument_resolver.variadic'] ?? $this->load('getDebug_ArgumentResolver_VariadicService.php'));
}));
